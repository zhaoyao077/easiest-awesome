{
  "url": "https://api.github.com/repos/apache/spark/issues/40713",
  "repository_url": "https://api.github.com/repos/apache/spark",
  "labels_url": "https://api.github.com/repos/apache/spark/issues/40713/labels{/name}",
  "comments_url": "https://api.github.com/repos/apache/spark/issues/40713/comments",
  "events_url": "https://api.github.com/repos/apache/spark/issues/40713/events",
  "html_url": "https://github.com/apache/spark/pull/40713",
  "id": 1659504743,
  "node_id": "PR_kwDOAQXtWs5N31yO",
  "number": 40713,
  "title": "[SPARK-42551][SQL] Support more subexpression elimination cases",
  "user": {
    "login": "wankunde",
    "id": 3626747,
    "node_id": "MDQ6VXNlcjM2MjY3NDc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3626747?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wankunde",
    "html_url": "https://github.com/wankunde",
    "followers_url": "https://api.github.com/users/wankunde/followers",
    "following_url": "https://api.github.com/users/wankunde/following{/other_user}",
    "gists_url": "https://api.github.com/users/wankunde/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wankunde/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wankunde/subscriptions",
    "organizations_url": "https://api.github.com/users/wankunde/orgs",
    "repos_url": "https://api.github.com/users/wankunde/repos",
    "events_url": "https://api.github.com/users/wankunde/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wankunde/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1405794576,
      "node_id": "MDU6TGFiZWwxNDA1Nzk0NTc2",
      "url": "https://api.github.com/repos/apache/spark/labels/SQL",
      "name": "SQL",
      "color": "ededed",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-04-08T12:12:28Z",
  "updated_at": "2023-05-09T08:56:22Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "draft": false,
  "pull_request": {
    "url": "https://api.github.com/repos/apache/spark/pulls/40713",
    "html_url": "https://github.com/apache/spark/pull/40713",
    "diff_url": "https://github.com/apache/spark/pull/40713.diff",
    "patch_url": "https://github.com/apache/spark/pull/40713.patch",
    "merged_at": null
  },
  "body": "<!--\r\nThanks for sending a pull request!  Here are some tips for you:\r\n  1. If this is your first time, please read our contributor guidelines: https://spark.apache.org/contributing.html\r\n  2. Ensure you have added or run the appropriate tests for your PR: https://spark.apache.org/developer-tools.html\r\n  3. If the PR is unfinished, add '[WIP]' in your PR title, e.g., '[WIP][SPARK-XXXX] Your PR title ...'.\r\n  4. Be sure to keep the PR description updated to reflect all changes.\r\n  5. Please write your PR title to summarize what this PR proposes.\r\n  6. If possible, provide a concise example to reproduce the issue for a faster review.\r\n  7. If you want to add a new configuration, please read the guideline first for naming configurations in\r\n     'core/src/main/scala/org/apache/spark/internal/config/ConfigEntry.scala'.\r\n  8. If you want to add or modify an error type or message, please read the guideline first in\r\n     'core/src/main/resources/error/README.md'.\r\n-->\r\n\r\n### What changes were proposed in this pull request?\r\n\r\n#### How to support more subexpressions elimination cases\r\n\r\n* Get all common expressions from input expressions of the current physical operator to current CodeGenContext. Recursively visits all subexpressions regardless of whether the current expression is a conditional expression.\r\n* For each common expression:\r\n  * Add a new boolean variable subExprInit to indicate whether it has  already been evaluated. \r\n  * Add a new code block in CodeGenSupport trait, and reset those subExprInit variables to false before the physical operators begin to evaluate the input row.\r\n  * Add a new wrapper subExpr function for each common subexpression.\r\n\r\n```\r\nprivate void subExpr_n(${argList}) {\r\n if (!subExprInit_n) {\r\n   ${eval.code}\r\n   subExprInit_n = true;\r\n   subExprIsNull_n = ${eval.isNull};\r\n   subExprValue_n = ${eval.value};\r\n }\r\n}\r\n```\r\n\r\n  * When generating the input expression code,  if the input expression is a common expression, the expression code will be replaced with the corresponding subExpr function. When the subExpr function is called for the first time, subExprInit will be set to true, and the subsequent function calls will do nothing.\r\n\r\n#### Why should we support whole-stage subexpression elimination\r\n\r\nRight now each spark physical operator shares nothing but the input row, so the same expressions may be evaluated multiple times across different operators. For example, the expression udf(c1, c2) in plan Project [udf(c1, c2)] - Filter [udf(c1, c2) > 0] - Relation will be evaluated both in Project and Filter operators.  We can reuse the expression results across different operators such as Project and Filter.\r\n\r\n#### How to support whole-stage subexpression elimination\r\n\r\n* Add two properties in CodegenSupport trait, the reusable expressions and the the output attributes, we can reuse the expression results only if the output attributes are the same.\r\n* Visit all operators from top to bottom, bound the candidate expressions with the output attributes and add to the current candidate reusable expressions.\r\n* Visit all operators from bottom to top, collect all the common expressions to the current operator, and add the initialize code to the current operator if the common expressions have not been initialized.\r\n* Replace the common expressions code when generating codes for  the physical operators.\r\n\r\n\r\n### Why are the changes needed?\r\n\r\nSupport more subexpression elimination cases, improve performance.\r\n\r\nFor example, TPCDS q23b query,  we can reuse the result of projection `sum(ss_quantity * ss_sales_price)` in the if expressions:\r\n```\r\nif (isnull((cast(input[2, int, true] as decimal(10,0)) * input[3, decimal(7,2), true])))\r\n   input[0, decimal(28,2), true]\r\nelse \r\n   (input[0, decimal(28,2), true] + cast(knownnotnull((cast(input[2, int, true] as decimal(10,0)) * input[3, decimal(7,2), true])) as decimal(28,2)))\r\n```\r\nq4, q62, q67 are similar to the above.\r\n\r\n| Query    | Time with PR | Time without PR | Time diff | Percentage |\r\n|----------|--------------|-----------------|-----------|------------|\r\n| q1.sql   | 36.97        | 36.623          | -0.347    | 99.06%     |\r\n| q2.sql   | 42.699       | 41.741          | -0.958    | 97.76%     |\r\n| q3.sql   | 6.038        | 6.111           | 0.073     | 101.21%    |\r\n| q4.sql   | 273.849      | 323.799         | 49.95     | 118.24%    |\r\n| q5.sql   | 76.202       | 76.353          | 0.151     | 100.20%    |\r\n| q6.sql   | 8.451        | 9.011           | 0.56      | 106.63%    |\r\n| q7.sql   | 13.017       | 12.954          | -0.063    | 99.52%     |\r\n| q8.sql   | 10.22        | 11.027          | 0.807     | 107.90%    |\r\n| q9.sql   | 72.843       | 72.019          | -0.824    | 98.87%     |\r\n| q10.sql  | 13.233       | 14.028          | 0.795     | 106.01%    |\r\n| q11.sql  | 112.252      | 112.983         | 0.731     | 100.65%    |\r\n| q12.sql  | 3.036        | 3.488           | 0.452     | 114.89%    |\r\n| q13.sql  | 12.471       | 12.911          | 0.44      | 103.53%    |\r\n| q14a.sql | 210.201      | 220.12          | 9.919     | 104.72%    |\r\n| q14b.sql | 185.374      | 187.57          | 2.196     | 101.18%    |\r\n| q15.sql  | 10.189       | 10.338          | 0.149     | 101.46%    |\r\n| q16.sql  | 80.756       | 82.503          | 1.747     | 102.16%    |\r\n| q17.sql  | 28.523       | 28.567          | 0.044     | 100.15%    |\r\n| q18.sql  | 13.417       | 14.271          | 0.854     | 106.37%    |\r\n| q19.sql  | 6.366        | 6.53            | 0.164     | 102.58%    |\r\n| q20.sql  | 3.427        | 4.939           | 1.512     | 144.12%    |\r\n| q21.sql  | 2.096        | 2.16            | 0.064     | 103.05%    |\r\n| q22.sql  | 14.4         | 14.01           | -0.39     | 97.29%     |\r\n| q23a.sql | 507.253      | 545.185         | 37.932    | 107.48%    |\r\n| q23b.sql | 707.054      | 768.148         | 61.094    | 108.64%    |\r\n| q24a.sql | 193.116      | 193.793         | 0.677     | 100.35%    |\r\n| q24b.sql | 177.109      | 179.54          | 2.431     | 101.37%    |\r\n| q25.sql  | 22.264       | 22.949          | 0.685     | 103.08%    |\r\n| q26.sql  | 8.68         | 8.973           | 0.293     | 103.38%    |\r\n| q27.sql  | 8.535        | 8.558           | 0.023     | 100.27%    |\r\n| q28.sql  | 101.953      | 102.713         | 0.76      | 100.75%    |\r\n| q29.sql  | 75.392       | 76.211          | 0.819     | 101.09%    |\r\n| q30.sql  | 12.265       | 13.508          | 1.243     | 110.13%    |\r\n| q31.sql  | 26.477       | 26.965          | 0.488     | 101.84%    |\r\n| q32.sql  | 3.393        | 3.507           | 0.114     | 103.36%    |\r\n| q33.sql  | 6.909        | 7.277           | 0.368     | 105.33%    |\r\n| q34.sql  | 8.41         | 8.572           | 0.162     | 101.93%    |\r\n| q35.sql  | 34.214       | 36.822          | 2.608     | 107.62%    |\r\n| q36.sql  | 9.027        | 9.79            | 0.763     | 108.45%    |\r\n| q37.sql  | 36.076       | 36.753          | 0.677     | 101.88%    |\r\n| q38.sql  | 71.768       | 74.473          | 2.705     | 103.77%    |\r\n| q39a.sql | 7.753        | 7.617           | -0.136    | 98.25%     |\r\n| q39b.sql | 6.365        | 7.229           | 0.864     | 113.57%    |\r\n| q40.sql  | 16.588       | 17.164          | 0.576     | 103.47%    |\r\n| q41.sql  | 1.162        | 1.188           | 0.026     | 102.24%    |\r\n| q42.sql  | 2.3          | 2.561           | 0.261     | 111.35%    |\r\n| q43.sql  | 7.407        | 7.605           | 0.198     | 102.67%    |\r\n| q44.sql  | 28.939       | 30.473          | 1.534     | 105.30%    |\r\n| q45.sql  | 9.796        | 9.634           | -0.162    | 98.35%     |\r\n| q46.sql  | 9.496        | 9.692           | 0.196     | 102.06%    |\r\n| q47.sql  | 27.087       | 27.151          | 0.064     | 100.24%    |\r\n| q48.sql  | 14.524       | 14.889          | 0.365     | 102.51%    |\r\n| q49.sql  | 21.466       | 21.572          | 0.106     | 100.49%    |\r\n| q50.sql  | 194.755      | 195.052         | 0.297     | 100.15%    |\r\n| q51.sql  | 37.493       | 38.56           | 1.067     | 102.85%    |\r\n| q52.sql  | 2.227        | 2.28            | 0.053     | 102.38%    |\r\n| q53.sql  | 5.375        | 5.437           | 0.062     | 101.15%    |\r\n| q54.sql  | 12.556       | 13.015          | 0.459     | 103.66%    |\r\n| q55.sql  | 2.341        | 2.809           | 0.468     | 119.99%    |\r\n| q56.sql  | 7.424        | 7.207           | -0.217    | 97.08%     |\r\n| q57.sql  | 17.606       | 17.797          | 0.191     | 101.08%    |\r\n| q58.sql  | 6.169        | 6.374           | 0.205     | 103.32%    |\r\n| q59.sql  | 27.602       | 27.744          | 0.142     | 100.51%    |\r\n| q60.sql  | 7.04         | 7.459           | 0.419     | 105.95%    |\r\n| q61.sql  | 7.838        | 7.816           | -0.022    | 99.72%     |\r\n| q62.sql  | 9.726        | 10.762          | 1.036     | 110.65%    |\r\n| q63.sql  | 4.816        | 5.176           | 0.36      | 107.48%    |\r\n| q64.sql  | 253.937      | 261.034         | 7.097     | 102.79%    |\r\n| q65.sql  | 78.942       | 78.373          | -0.569    | 99.28%     |\r\n| q66.sql  | 15.199       | 14.73           | -0.469    | 96.91%     |\r\n| q67.sql  | 926.049      | 1022.971        | 96.922    | 110.47%    |\r\n| q68.sql  | 7.932        | 7.977           | 0.045     | 100.57%    |\r\n| q69.sql  | 12.101       | 14.699          | 2.598     | 121.47%    |\r\n| q70.sql  | 20.7         | 20.872          | 0.172     | 100.83%    |\r\n| q71.sql  | 14.96        | 15.065          | 0.105     | 100.70%    |\r\n| q72.sql  | 73.215       | 73.955          | 0.74      | 101.01%    |\r\n| q73.sql  | 5.973        | 6.126           | 0.153     | 102.56%    |\r\n| q74.sql  | 97.611       | 99.577          | 1.966     | 102.01%    |\r\n| q75.sql  | 125.005      | 129.508         | 4.503     | 103.60%    |\r\n| q76.sql  | 34.812       | 35.34           | 0.528     | 101.52%    |\r\n| q77.sql  | 7.686        | 8.474           | 0.788     | 110.25%    |\r\n| q78.sql  | 287.959      | 292.936         | 4.977     | 101.73%    |\r\n| q79.sql  | 8.401        | 9.616           | 1.215     | 114.46%    |\r\n| q80.sql  | 59.371       | 60.051          | 0.68      | 101.15%    |\r\n| q81.sql  | 18.452       | 19.499          | 1.047     | 105.67%    |\r\n| q82.sql  | 64.093       | 65.032          | 0.939     | 101.47%    |\r\n| q83.sql  | 4.675        | 4.867           | 0.192     | 104.11%    |\r\n| q84.sql  | 10.456       | 10.816          | 0.36      | 103.44%    |\r\n| q85.sql  | 12.347       | 12.77           | 0.423     | 103.43%    |\r\n| q86.sql  | 6.537        | 6.843           | 0.306     | 104.68%    |\r\n| q87.sql  | 77.427       | 77.876          | 0.449     | 100.58%    |\r\n| q88.sql  | 83.082       | 83.385          | 0.303     | 100.36%    |\r\n| q89.sql  | 6.645        | 6.801           | 0.156     | 102.35%    |\r\n| q90.sql  | 7.841        | 7.883           | 0.042     | 100.54%    |\r\n| q91.sql  | 3.88         | 4.129           | 0.249     | 106.42%    |\r\n| q92.sql  | 3.044        | 3.271           | 0.227     | 107.46%    |\r\n| q93.sql  | 361.149      | 365.883         | 4.734     | 101.31%    |\r\n| q94.sql  | 43.929       | 46.667          | 2.738     | 106.23%    |\r\n| q95.sql  | 196.363      | 197.427         | 1.064     | 100.54%    |\r\n| q96.sql  | 12.457       | 12.496          | 0.039     | 100.31%    |\r\n| q97.sql  | 80.131       | 81.821          | 1.69      | 102.11%    |\r\n| q98.sql  | 6.885        | 7.522           | 0.637     | 109.25%    |\r\n| q99.sql  | 17.685       | 18.009          | 0.324     | 101.83%    |\r\n|          | 6788.707     | 7116.357        | 327.65    | 104.82%    |\r\n\r\nOne of our production query which has 19 case when  expressions, it's query time changed from 1.1 hour to 42 seconds.\r\n\r\n![image](https://user-images.githubusercontent.com/3626747/227448668-8a58ff33-3296-4a95-984b-292af47532ca.png)\r\n\r\nA simplify benchmark of the above production query.\r\n```\r\n    spark.range(1, 2000000, 1, 1)\r\n      .selectExpr(\r\n        \"cast(id + 1 as decimal) as a\",\r\n        \"cast(id + 2 as decimal) as b\",\r\n        \"cast(id + 3 as decimal) as c\",\r\n        \"cast(id + 4 as decimal) as d\")\r\n      .createOrReplaceTempView(\"tab\")\r\n    runBenchmark(\"Subexpression elimination in ProjectExec\") {\r\n      val benchmark =\r\n        new Benchmark(\"Subexpression elimination in ProjectExec\", 2000000, output = output)\r\n      benchmark.addCase(s\"Test query\") { _ =>\r\n        val query =\r\n          s\"\"\"\r\n             |SELECT a, b, c, d,\r\n             |       a * b / c as s1,\r\n             |       CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN 1 ELSE 0 END s2,\r\n             |       CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN\r\n             |            CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN 1 ELSE 0 END\r\n             |       ELSE 0 END s3,\r\n             |       CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN\r\n             |            CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN\r\n             |                 CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN 1 ELSE 0 END\r\n             |            ELSE 0 END\r\n             |       ELSE 0 END s4,\r\n             |       CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN\r\n             |            CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN\r\n             |                 CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN\r\n             |                      CASE WHEN d = 0 THEN 0 WHEN a * b / c > 0 THEN 1 ELSE 0 END\r\n             |                 ELSE 0 END\r\n             |            ELSE 0 END\r\n             |       ELSE 0 END s5\r\n             |FROM tab\r\n             |\"\"\".stripMargin\r\n        spark.sql(query).noop()\r\n      }\r\n      benchmark.run()\r\n```\r\nLocal benchmark result:\r\nBefore this PR:\r\n```\r\nJava HotSpot(TM) 64-Bit Server VM 1.8.0_281-b09 on Mac OS X 10.16\r\nIntel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\nSubexpression elimination in ProjectExec:  Best Time(ms)   Avg Time(ms)   Stdev(ms)    Rate(M/s)   Per Row(ns)   Relative\r\n------------------------------------------------------------------------------------------------------------------------\r\nTest query                                         9713           9900         263          0.2        4856.7       1.0X\r\n```\r\n\r\nAfter this PR:\r\n```\r\nJava HotSpot(TM) 64-Bit Server VM 1.8.0_281-b09 on Mac OS X 10.16\r\nIntel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\nSubexpression elimination in ProjectExec:  Best Time(ms)   Avg Time(ms)   Stdev(ms)    Rate(M/s)   Per Row(ns)   Relative\r\n------------------------------------------------------------------------------------------------------------------------\r\nTest query                                         1238           1307          98          8.1         123.8       1.0X\r\n```\r\n\r\n\r\n### Does this PR introduce _any_ user-facing change?\r\n\r\nNo\r\n\r\n\r\n### How was this patch tested?\r\n\r\nExists UT.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/apache/spark/issues/40713/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/apache/spark/issues/40713/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
