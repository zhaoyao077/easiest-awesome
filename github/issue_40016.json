{
  "url": "https://api.github.com/repos/apache/spark/issues/40016",
  "repository_url": "https://api.github.com/repos/apache/spark",
  "labels_url": "https://api.github.com/repos/apache/spark/issues/40016/labels{/name}",
  "comments_url": "https://api.github.com/repos/apache/spark/issues/40016/comments",
  "events_url": "https://api.github.com/repos/apache/spark/issues/40016/events",
  "html_url": "https://github.com/apache/spark/pull/40016",
  "id": 1584308707,
  "node_id": "PR_kwDOAQXtWs5J89RV",
  "number": 40016,
  "title": "[SPARK-42436][SQL] Improve multiTransform to generate alternatives dynamically",
  "user": {
    "login": "peter-toth",
    "id": 7253827,
    "node_id": "MDQ6VXNlcjcyNTM4Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7253827?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/peter-toth",
    "html_url": "https://github.com/peter-toth",
    "followers_url": "https://api.github.com/users/peter-toth/followers",
    "following_url": "https://api.github.com/users/peter-toth/following{/other_user}",
    "gists_url": "https://api.github.com/users/peter-toth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/peter-toth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/peter-toth/subscriptions",
    "organizations_url": "https://api.github.com/users/peter-toth/orgs",
    "repos_url": "https://api.github.com/users/peter-toth/repos",
    "events_url": "https://api.github.com/users/peter-toth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/peter-toth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1405794576,
      "node_id": "MDU6TGFiZWwxNDA1Nzk0NTc2",
      "url": "https://api.github.com/repos/apache/spark/labels/SQL",
      "name": "SQL",
      "color": "ededed",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-02-14T14:55:36Z",
  "updated_at": "2023-02-15T13:21:58Z",
  "closed_at": "2023-02-15T12:57:04Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "draft": false,
  "pull_request": {
    "url": "https://api.github.com/repos/apache/spark/pulls/40016",
    "html_url": "https://github.com/apache/spark/pull/40016",
    "diff_url": "https://github.com/apache/spark/pull/40016.diff",
    "patch_url": "https://github.com/apache/spark/pull/40016.patch",
    "merged_at": null
  },
  "body": "### What changes were proposed in this pull request?\r\n\r\nThis PR improves `TreeNode.multiTransform()` to generate the alternative sequences only if needed and fully dynamically. Consider the following simplified example:\r\n```\r\n(a + b).multiTransform {\r\n  case a => Stream(1, 2)\r\n  case b => Stream(10, 20)\r\n}\r\n```\r\nthe result is the cartesian product: `Stream(1 + 10, 2 + 10, 1 + 20, 2 + 20)`.\r\nCurrently `multiTransform` calculates the 2 alternative streams for `a` and `b` **before** start building building the cartesian product stream using `+`. So kind of caches the \"inner\" `Stream(1, 2)` in the beginning and when the \"outer\" stream (`Stream(10, 20)`) iterates from `10` to `20` reuses the cache. Although this caching is sometimes useful it has 2 drawbacks:\r\n- If the \"outer\" (`b` alternatives) stream returns `Seq.emtpy` (to indicate pruning) the alternatives for the `a` are unecessary calculated and will be discarded.\r\n- The \"inner\" stream transformation can't depend on the current \"outer\" stream alternative.\r\n   E.g. let's see the above `a + b` example but we want to transform both `a` and `b` to `1` and `2`, and we want to have only those alternatives where these 2 are transformed equal (`Stream(1 + 1, 2 + 2)`). This is currently it is not possible with a single `multiTransform` call due to the inner stream alternatives are calculated in advance and cached. \r\nBut, if `multiTransform` would be dynamic and the \"inner\" alternatives stream would be recalculated when the \"outer\" alternatives stream iterates then this would be possible:\r\n  ```\r\n  // Cache\r\n  var a_or_b = None\r\n  (a + b).multiTransform {\r\n    case a | b =>\r\n      // Return alternatives from cache if this is not the first encounter\r\n      a_or_b.getOrElse(\r\n        // Besides returning the alternatives for the first encounter, also set up a mechanism to\r\n        // update the cache when the new alternatives are requested.\r\n        Stream(Literal(1), Literal(2)).map { x =>\r\n          a_or_b = Some(Seq(x))\r\n          x\r\n        }.append {\r\n          a_or_b = None\r\n          Seq.empty\r\n        })\r\n  }\r\n  ```\r\nPlease note:\r\n- that this is a simplified example and we could have run 2 simple `transforms` to get the exprected 2 expressions, but `multiTransform` can do other orthogonal transformations in the same run (e.g. `c` -> `Seq(100, 200)`) and `multiTransform` has the advantage of returning the results lazlily as a stream.\r\n- the original behaviour of caching \"inner\" alternative streams is still doable and actually our current usecases in `AliasAwareOutputExpression` and in `BroadcastHashJoinExec` still do it as they store the alternatives in advance in maps and the `multiTransform` call just gets the alternatives from those maps when needed. \r\n\r\n### Why are the changes needed?\r\nImprovement to make `multiTransform` more versatile.\r\n\r\n### Does this PR introduce _any_ user-facing change?\r\nNo.\r\n\r\n### How was this patch tested?\r\nAdded new UTs.",
  "closed_by": {
    "login": "cloud-fan",
    "id": 3182036,
    "node_id": "MDQ6VXNlcjMxODIwMzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cloud-fan",
    "html_url": "https://github.com/cloud-fan",
    "followers_url": "https://api.github.com/users/cloud-fan/followers",
    "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
    "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
    "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
    "repos_url": "https://api.github.com/users/cloud-fan/repos",
    "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/apache/spark/issues/40016/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/apache/spark/issues/40016/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
