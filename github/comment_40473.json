[
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1474562711",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1474562711",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1474562711,
    "node_id": "IC_kwDOAQXtWs5X5AqX",
    "user": {
      "login": "rednaxelafx",
      "id": 107834,
      "node_id": "MDQ6VXNlcjEwNzgzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/107834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rednaxelafx",
      "html_url": "https://github.com/rednaxelafx",
      "followers_url": "https://api.github.com/users/rednaxelafx/followers",
      "following_url": "https://api.github.com/users/rednaxelafx/following{/other_user}",
      "gists_url": "https://api.github.com/users/rednaxelafx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rednaxelafx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rednaxelafx/subscriptions",
      "organizations_url": "https://api.github.com/users/rednaxelafx/orgs",
      "repos_url": "https://api.github.com/users/rednaxelafx/repos",
      "events_url": "https://api.github.com/users/rednaxelafx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rednaxelafx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-18T01:25:34Z",
    "updated_at": "2023-03-18T01:25:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @peter-toth @cloud-fan \r\nAlso cc @xinrong-meng for this being a potential Spark 3.4.0 release blocker.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1474562711/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1474774246",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1474774246",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1474774246,
    "node_id": "IC_kwDOAQXtWs5X50Tm",
    "user": {
      "login": "peter-toth",
      "id": 7253827,
      "node_id": "MDQ6VXNlcjcyNTM4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7253827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peter-toth",
      "html_url": "https://github.com/peter-toth",
      "followers_url": "https://api.github.com/users/peter-toth/followers",
      "following_url": "https://api.github.com/users/peter-toth/following{/other_user}",
      "gists_url": "https://api.github.com/users/peter-toth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peter-toth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peter-toth/subscriptions",
      "organizations_url": "https://api.github.com/users/peter-toth/orgs",
      "repos_url": "https://api.github.com/users/peter-toth/repos",
      "events_url": "https://api.github.com/users/peter-toth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peter-toth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-18T08:38:47Z",
    "updated_at": "2023-03-18T08:42:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @rednaxelafx for the fix and pinging me.\r\nI think you are right that `EquivalentExpressions.addExpr()` should be guarded by `supportedExpression()` if we guard `getExprState()`. But, I'm not sure it is right that we don't deduplicate the `max(transform(array(id), x -> x))` in your example query.\r\nProbably the real issue here is that in `PhysicalAggregation` the class `EquivalentExpressions` is used for simply deduplicating whole expressions while on executors we use it for common subexpression elimination. In the former case we don't need the `LambdaVariable` guard but in the latter one we need it. So maybe we should add a argument to `EquivalentExpressions` to enable/disable the guards and in `PhysicalAggregation` we should disable it?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1474774246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1474848224",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1474848224",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1474848224,
    "node_id": "IC_kwDOAQXtWs5X6GXg",
    "user": {
      "login": "Kimahriman",
      "id": 3536454,
      "node_id": "MDQ6VXNlcjM1MzY0NTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3536454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kimahriman",
      "html_url": "https://github.com/Kimahriman",
      "followers_url": "https://api.github.com/users/Kimahriman/followers",
      "following_url": "https://api.github.com/users/Kimahriman/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kimahriman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kimahriman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kimahriman/subscriptions",
      "organizations_url": "https://api.github.com/users/Kimahriman/orgs",
      "repos_url": "https://api.github.com/users/Kimahriman/repos",
      "events_url": "https://api.github.com/users/Kimahriman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kimahriman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-18T13:11:32Z",
    "updated_at": "2023-03-18T13:12:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just seeing this group of PRs (most notably https://github.com/apache/spark/pull/39046), was there a real reason `NamedLambdaVariable` was added into all this mix? If I understand right, it effectively eliminates all subexpression elimination involving any expressions containing higher-order functions at any nested level, even though it's perfectly valid to pull out a complete high-order function, you just can't pull out the `LambdaFunction` by itself. \r\n\r\nCurrently the check for `CodegenFallback` is what prevents the `LambdaFunction`'s from being considered for subexpression elimination. Quick plug for my 1.5 year old PR for adding codegen to HOFs https://github.com/apache/spark/pull/34558 simply adds `HigherOrderFunction` as a special case to only consider the arguments and not the functions themselves for subexpression elimination",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1474848224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1474880345",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1474880345",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1474880345,
    "node_id": "IC_kwDOAQXtWs5X6ONZ",
    "user": {
      "login": "peter-toth",
      "id": 7253827,
      "node_id": "MDQ6VXNlcjcyNTM4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7253827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peter-toth",
      "html_url": "https://github.com/peter-toth",
      "followers_url": "https://api.github.com/users/peter-toth/followers",
      "following_url": "https://api.github.com/users/peter-toth/following{/other_user}",
      "gists_url": "https://api.github.com/users/peter-toth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peter-toth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peter-toth/subscriptions",
      "organizations_url": "https://api.github.com/users/peter-toth/orgs",
      "repos_url": "https://api.github.com/users/peter-toth/repos",
      "events_url": "https://api.github.com/users/peter-toth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peter-toth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-18T15:36:06Z",
    "updated_at": "2023-03-18T16:01:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hm, I think you are right @Kimahriman, `LambdaVariable` and `NamedLambdaVariable` are very different and `NamedLambdaVariable` seem to be used only in `LambdaFunction`s, so https://github.com/apache/spark/pull/39046 doesn't make sense and actually it can prevent pulling out higher order functions and so cause performance regression... I think that PR should be reverted.\r\nUpdate: I've filed a revert PR here: https://github.com/apache/spark/pull/40475\r\n\r\n\r\nBut I feel that is orthogonal to the issue that we use `EquivalentExpressions` for different purposes in `PhysicalAggregation` (the only place where we use `.addExpr()`) and in executors (`.addExprTree()` for subexpression elimination).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1474880345/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1477132202",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1477132202",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1477132202,
    "node_id": "IC_kwDOAQXtWs5YCz-q",
    "user": {
      "login": "rednaxelafx",
      "id": 107834,
      "node_id": "MDQ6VXNlcjEwNzgzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/107834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rednaxelafx",
      "html_url": "https://github.com/rednaxelafx",
      "followers_url": "https://api.github.com/users/rednaxelafx/followers",
      "following_url": "https://api.github.com/users/rednaxelafx/following{/other_user}",
      "gists_url": "https://api.github.com/users/rednaxelafx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rednaxelafx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rednaxelafx/subscriptions",
      "organizations_url": "https://api.github.com/users/rednaxelafx/orgs",
      "repos_url": "https://api.github.com/users/rednaxelafx/repos",
      "events_url": "https://api.github.com/users/rednaxelafx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rednaxelafx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T00:39:37Z",
    "updated_at": "2023-03-21T00:39:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@peter-toth could you please clarify why `supportedExpression()` was needed in `getExprState()` in the first place? i.e. why isn't it sufficient to add it to `addExprTree()`?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1477132202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1477136150",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1477136150",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1477136150,
    "node_id": "IC_kwDOAQXtWs5YC08W",
    "user": {
      "login": "rednaxelafx",
      "id": 107834,
      "node_id": "MDQ6VXNlcjEwNzgzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/107834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rednaxelafx",
      "html_url": "https://github.com/rednaxelafx",
      "followers_url": "https://api.github.com/users/rednaxelafx/followers",
      "following_url": "https://api.github.com/users/rednaxelafx/following{/other_user}",
      "gists_url": "https://api.github.com/users/rednaxelafx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rednaxelafx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rednaxelafx/subscriptions",
      "organizations_url": "https://api.github.com/users/rednaxelafx/orgs",
      "repos_url": "https://api.github.com/users/rednaxelafx/repos",
      "events_url": "https://api.github.com/users/rednaxelafx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rednaxelafx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T00:47:38Z",
    "updated_at": "2023-03-21T00:47:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Kimahriman I'd love to see a good CSE implementation for higher-order functions too. But for backporting the fix (which is this PR's primary intent) that would have been too much. For this one (or the one @peter-toth forked off) we're just aiming for a narrow fix that allows the aggregate to work again.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1477136150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1477140427",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1477140427",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1477140427,
    "node_id": "IC_kwDOAQXtWs5YC1_L",
    "user": {
      "login": "Kimahriman",
      "id": 3536454,
      "node_id": "MDQ6VXNlcjM1MzY0NTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3536454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kimahriman",
      "html_url": "https://github.com/Kimahriman",
      "followers_url": "https://api.github.com/users/Kimahriman/followers",
      "following_url": "https://api.github.com/users/Kimahriman/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kimahriman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kimahriman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kimahriman/subscriptions",
      "organizations_url": "https://api.github.com/users/Kimahriman/orgs",
      "repos_url": "https://api.github.com/users/Kimahriman/repos",
      "events_url": "https://api.github.com/users/Kimahriman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kimahriman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T00:55:19Z",
    "updated_at": "2023-03-21T00:55:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @Kimahriman I'd love to see a good CSE implementation for higher-order functions too. But for backporting the fix (which is this PR's primary intent) that would have been too much. For this one (or the one @peter-toth forked off) we're just aiming for a narrow fix that allows the aggregate to work again.\r\n\r\nYeah I was just commenting on the related PR that broke CSE for anything using a HOF. I had plans for trying to do CSE inside a HOF but that stalled when I didn't get any traction on the initial adding codegen support",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1477140427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1477165259",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1477165259",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1477165259,
    "node_id": "IC_kwDOAQXtWs5YC8DL",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T01:35:42Z",
    "updated_at": "2023-03-21T01:35:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "The check was added to `getExprState` in https://github.com/apache/spark/pull/39010, which is to avoid canonicalizing a subquery expression and leading to NPE.\r\n\r\nI agree that we should be consistent and this PR LGTM. Can we update the test case to use `LambdaVariable` as `NamedLambdaVariable` has been removed in https://github.com/apache/spark/pull/40475 ?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1477165259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1477837727",
    "html_url": "https://github.com/apache/spark/pull/40473#issuecomment-1477837727",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40473",
    "id": 1477837727,
    "node_id": "IC_kwDOAQXtWs5YFgOf",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T13:27:47Z",
    "updated_at": "2023-03-21T13:27:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks, merging to master/3.4!",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1477837727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
