{
  "url": "https://api.github.com/repos/apache/spark/issues/40970",
  "repository_url": "https://api.github.com/repos/apache/spark",
  "labels_url": "https://api.github.com/repos/apache/spark/issues/40970/labels{/name}",
  "comments_url": "https://api.github.com/repos/apache/spark/issues/40970/comments",
  "events_url": "https://api.github.com/repos/apache/spark/issues/40970/events",
  "html_url": "https://github.com/apache/spark/pull/40970",
  "id": 1685850603,
  "node_id": "PR_kwDOAQXtWs5PPo0W",
  "number": 40970,
  "title": "[SPARK-43290][SQL] Adds AES IV and AAD support to ExpressionImplUtils",
  "user": {
    "login": "sweisdb",
    "id": 60895808,
    "node_id": "MDQ6VXNlcjYwODk1ODA4",
    "avatar_url": "https://avatars.githubusercontent.com/u/60895808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sweisdb",
    "html_url": "https://github.com/sweisdb",
    "followers_url": "https://api.github.com/users/sweisdb/followers",
    "following_url": "https://api.github.com/users/sweisdb/following{/other_user}",
    "gists_url": "https://api.github.com/users/sweisdb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sweisdb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sweisdb/subscriptions",
    "organizations_url": "https://api.github.com/users/sweisdb/orgs",
    "repos_url": "https://api.github.com/users/sweisdb/repos",
    "events_url": "https://api.github.com/users/sweisdb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sweisdb/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1405794576,
      "node_id": "MDU6TGFiZWwxNDA1Nzk0NTc2",
      "url": "https://api.github.com/repos/apache/spark/labels/SQL",
      "name": "SQL",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 1981527456,
      "node_id": "MDU6TGFiZWwxOTgxNTI3NDU2",
      "url": "https://api.github.com/repos/apache/spark/labels/CORE",
      "name": "CORE",
      "color": "ededed",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2023-04-26T22:58:23Z",
  "updated_at": "2023-05-22T19:43:54Z",
  "closed_at": "2023-05-22T19:43:54Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "draft": false,
  "pull_request": {
    "url": "https://api.github.com/repos/apache/spark/pulls/40970",
    "html_url": "https://github.com/apache/spark/pull/40970",
    "diff_url": "https://github.com/apache/spark/pull/40970.diff",
    "patch_url": "https://github.com/apache/spark/pull/40970.patch",
    "merged_at": null
  },
  "body": "### What changes were proposed in this pull request?\r\nThis change adds support for optional IV and AAD fields to ExpressionImplUtils, which is the underlying library to support `aes_encrypt` and `aes_decrypt`. This allows callers to specify their own initialization vector values for some specific use cases, and to take advantage of AES-GCM's authenticated additional data optional input.\r\n\r\nThis change does **not** add the support to the user-facing `aes_encrypt` and `aes_decrypt` yet. That will be added in a follow-up, rather than in a single complex change.\r\n\r\n### Why are the changes needed?\r\n\r\nThere are some use cases where callers to ExpressionImplUtils via aes_encrypt may want to provide initialization vectors (IVs) or additional authenticated data (AAD). The most common cases will be:\r\n1. Ensuring that ciphertext matches values that have been encrypted by external tools. In those cases, the caller will need to provide an identical IV value.\r\n2. For AES-CBC mode, there are some cases where callers want to generate deterministic encrypted output.\r\n3. For AES-GCM mode, providing AAD fields allows callers to bind additional data to an encrypted ciphertext so that it can only be decrypted by a caller providing the same value. This is often used to enforce some context.\r\n\r\n\r\n### Does this PR introduce _any_ user-facing change?\r\n\r\nNot yet. This change adds support to the underlying implementation, but does not yet update the SQL support to include the new parameters.\r\n\r\n### How was this patch tested?\r\n\r\nAll existing unit tests still pass and new tests in `ExpressionImplUtilsSuite` exercise the new code paths:\r\n```\r\nbuild/sbt \"sql/test:testOnly org.apache.spark.sql.DataFrameFunctionsSuite\"\r\nbuild/sbt \"catalyst/test:testOnly org.apache.spark.sql.catalyst.expressions.ExpressionImplUtilsSuite\"\r\n```",
  "closed_by": {
    "login": "MaxGekk",
    "id": 1580697,
    "node_id": "MDQ6VXNlcjE1ODA2OTc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1580697?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MaxGekk",
    "html_url": "https://github.com/MaxGekk",
    "followers_url": "https://api.github.com/users/MaxGekk/followers",
    "following_url": "https://api.github.com/users/MaxGekk/following{/other_user}",
    "gists_url": "https://api.github.com/users/MaxGekk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MaxGekk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MaxGekk/subscriptions",
    "organizations_url": "https://api.github.com/users/MaxGekk/orgs",
    "repos_url": "https://api.github.com/users/MaxGekk/repos",
    "events_url": "https://api.github.com/users/MaxGekk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MaxGekk/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/apache/spark/issues/40970/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/apache/spark/issues/40970/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
