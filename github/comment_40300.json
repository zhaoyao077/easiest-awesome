[
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1457500143",
    "html_url": "https://github.com/apache/spark/pull/40300#issuecomment-1457500143",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40300",
    "id": 1457500143,
    "node_id": "IC_kwDOAQXtWs5W36_v",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T04:16:16Z",
    "updated_at": "2023-03-07T04:16:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's a good idea to provide an API that allows people to unambiguously reference metadata columns, and I like the new `Dataset.metadataColumn` function. However, I think the prepending underscore approach is a bit hacky. It's too implicit and I'd prefer a more explicit syntax like `SELECT metadata(_metadata) FROM t`. We can discuss this more and invite more SQL experts. Shall we exclude it from this PR for now?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1457500143/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1463005688",
    "html_url": "https://github.com/apache/spark/pull/40300#issuecomment-1463005688",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40300",
    "id": 1463005688,
    "node_id": "IC_kwDOAQXtWs5XM7H4",
    "user": {
      "login": "ryan-johnson-databricks",
      "id": 79601771,
      "node_id": "MDQ6VXNlcjc5NjAxNzcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/79601771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryan-johnson-databricks",
      "html_url": "https://github.com/ryan-johnson-databricks",
      "followers_url": "https://api.github.com/users/ryan-johnson-databricks/followers",
      "following_url": "https://api.github.com/users/ryan-johnson-databricks/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryan-johnson-databricks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryan-johnson-databricks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryan-johnson-databricks/subscriptions",
      "organizations_url": "https://api.github.com/users/ryan-johnson-databricks/orgs",
      "repos_url": "https://api.github.com/users/ryan-johnson-databricks/repos",
      "events_url": "https://api.github.com/users/ryan-johnson-databricks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryan-johnson-databricks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-09T23:52:08Z",
    "updated_at": "2023-03-10T00:08:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It's a good idea to provide an API that allows people to unambiguously reference metadata columns, and I like the new `Dataset.metadataColumn` function. However, I think the prepending underscore approach is a bit hacky. It's too implicit and I'd prefer a more explicit syntax like `SELECT metadata(_metadata) FROM t`. We can discuss this more and invite more SQL experts. Shall we exclude it from this PR for now?\r\n\r\n@cloud-fan The prepended underscore is _NOT_ primarily intended as a user surface. Rather, it's a reliale way to get a unique column name that's still at least somewhat readable if you look at the query plan (unlike e.g. a uuid). The new `Dataset.metadataColumn` method does not even _look_ at a renamed attribute's name, for example.\r\n\r\nI updated the PR description to not mention the specific renaming mechanism, and to indicate that a SQL user surface is out of scope.\r\n\r\nAt this point, the only remaining reference to prepended underscores is the two unit tests (\"metadata name conflict resolved with leading underscores\"), which validate that the renaming reliably produces unique names as intended. If you don't think the test coverage is important, we could remove even that?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1463005688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1485216976",
    "html_url": "https://github.com/apache/spark/pull/40300#issuecomment-1485216976",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40300",
    "id": 1485216976,
    "node_id": "IC_kwDOAQXtWs5YhpzQ",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-27T14:28:08Z",
    "updated_at": "2023-03-27T14:28:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "about https://github.com/apache/spark/pull/40300/files#r1129818813 , I think if `SubqueryAlias` can't propagate metadata columns, then `df.metadataColumn` should not be able to get the column, what do you think? @ryan-johnson-databricks ",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1485216976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1487610774",
    "html_url": "https://github.com/apache/spark/pull/40300#issuecomment-1487610774",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40300",
    "id": 1487610774,
    "node_id": "IC_kwDOAQXtWs5YqyOW",
    "user": {
      "login": "ryan-johnson-databricks",
      "id": 79601771,
      "node_id": "MDQ6VXNlcjc5NjAxNzcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/79601771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryan-johnson-databricks",
      "html_url": "https://github.com/ryan-johnson-databricks",
      "followers_url": "https://api.github.com/users/ryan-johnson-databricks/followers",
      "following_url": "https://api.github.com/users/ryan-johnson-databricks/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryan-johnson-databricks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryan-johnson-databricks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryan-johnson-databricks/subscriptions",
      "organizations_url": "https://api.github.com/users/ryan-johnson-databricks/orgs",
      "repos_url": "https://api.github.com/users/ryan-johnson-databricks/repos",
      "events_url": "https://api.github.com/users/ryan-johnson-databricks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryan-johnson-databricks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-28T21:22:48Z",
    "updated_at": "2023-03-28T21:22:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> about https://github.com/apache/spark/pull/40300/files#r1129818813 , I think if `SubqueryAlias` can't propagate metadata columns, then `df.metadataColumn` should not be able to get the column, what do you think? @ryan-johnson-databricks\r\n\r\nIMO changing the behavior of `SubqueryAlias` (and other specific plan node types) is out of scope for this PR -- this PR does not change that existing situation.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1487610774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1489959075",
    "html_url": "https://github.com/apache/spark/pull/40300#issuecomment-1489959075",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40300",
    "id": 1489959075,
    "node_id": "IC_kwDOAQXtWs5Yzvij",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T09:08:52Z",
    "updated_at": "2023-03-30T09:08:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks, merging to master!",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1489959075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
