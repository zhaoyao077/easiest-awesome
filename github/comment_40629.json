[
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1494736492",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1494736492",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1494736492,
    "node_id": "IC_kwDOAQXtWs5ZF95s",
    "user": {
      "login": "liuzqt",
      "id": 22358241,
      "node_id": "MDQ6VXNlcjIyMzU4MjQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22358241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liuzqt",
      "html_url": "https://github.com/liuzqt",
      "followers_url": "https://api.github.com/users/liuzqt/followers",
      "following_url": "https://api.github.com/users/liuzqt/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuzqt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liuzqt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuzqt/subscriptions",
      "organizations_url": "https://api.github.com/users/liuzqt/orgs",
      "repos_url": "https://api.github.com/users/liuzqt/repos",
      "events_url": "https://api.github.com/users/liuzqt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liuzqt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-03T17:51:30Z",
    "updated_at": "2023-04-03T17:51:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @cloud-fan @jiangxb1987  could you pls help review this?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1494736492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1494785221",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1494785221",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1494785221,
    "node_id": "IC_kwDOAQXtWs5ZGJzF",
    "user": {
      "login": "mridulm",
      "id": 1591700,
      "node_id": "MDQ6VXNlcjE1OTE3MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mridulm",
      "html_url": "https://github.com/mridulm",
      "followers_url": "https://api.github.com/users/mridulm/followers",
      "following_url": "https://api.github.com/users/mridulm/following{/other_user}",
      "gists_url": "https://api.github.com/users/mridulm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mridulm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mridulm/subscriptions",
      "organizations_url": "https://api.github.com/users/mridulm/orgs",
      "repos_url": "https://api.github.com/users/mridulm/repos",
      "events_url": "https://api.github.com/users/mridulm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mridulm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-03T18:29:13Z",
    "updated_at": "2023-04-03T18:29:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is unclear to me why we need this from the description, what the existing issues being solved are, and how much this approach will help.\r\nBtw, if the variable being broadcasted is that small - simply inline it in the task and remove the roundtrip entirely ?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1494785221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1495187524",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1495187524",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1495187524,
    "node_id": "IC_kwDOAQXtWs5ZHsBE",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-04T00:49:38Z",
    "updated_at": "2023-04-04T00:49:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mridulm the use case we found so far is the broadcasting of hadoop conf: https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/parquet/ParquetFileFormat.scala#L161-L162\r\n\r\nSimply inline the variable does not improve the perf because:\r\n1. hadoop conf is not that small\r\n2. if the executor is powerful like 16 cores, the hadoop conf has 16 copies in the executor JVM, which is a waste.\r\n\r\nWe might find more cases in the future, as SQL operators need to broadcast small data (but not as small as a single integer) sometimes.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1495187524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1498430883",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1498430883",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1498430883,
    "node_id": "IC_kwDOAQXtWs5ZUD2j",
    "user": {
      "login": "mridulm",
      "id": 1591700,
      "node_id": "MDQ6VXNlcjE1OTE3MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mridulm",
      "html_url": "https://github.com/mridulm",
      "followers_url": "https://api.github.com/users/mridulm/followers",
      "following_url": "https://api.github.com/users/mridulm/following{/other_user}",
      "gists_url": "https://api.github.com/users/mridulm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mridulm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mridulm/subscriptions",
      "organizations_url": "https://api.github.com/users/mridulm/orgs",
      "repos_url": "https://api.github.com/users/mridulm/repos",
      "events_url": "https://api.github.com/users/mridulm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mridulm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-06T03:12:30Z",
    "updated_at": "2023-04-06T03:13:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why not handle a single chunk case in `TorrentBroadcast` to inline it ?\r\nFor the cases mentioned, this should come within 4mb.\r\n\r\nThis will prevent adding a new codepath, while also making all cases of broadcast faster for smaller blocks.\r\nIt also allows us to seemlessly go from smaller to larger payloads without changing api's in code.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1498430883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1498460524",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1498460524",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1498460524,
    "node_id": "IC_kwDOAQXtWs5ZULFs",
    "user": {
      "login": "mridulm",
      "id": 1591700,
      "node_id": "MDQ6VXNlcjE1OTE3MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mridulm",
      "html_url": "https://github.com/mridulm",
      "followers_url": "https://api.github.com/users/mridulm/followers",
      "following_url": "https://api.github.com/users/mridulm/following{/other_user}",
      "gists_url": "https://api.github.com/users/mridulm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mridulm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mridulm/subscriptions",
      "organizations_url": "https://api.github.com/users/mridulm/orgs",
      "repos_url": "https://api.github.com/users/mridulm/repos",
      "events_url": "https://api.github.com/users/mridulm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mridulm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-06T04:03:23Z",
    "updated_at": "2023-04-06T04:03:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "A strawman proposal:\r\n```\r\ndiff --git a/core/src/main/scala/org/apache/spark/broadcast/TorrentBroadcast.scala b/core/src/main/scala/org/apache/spark/broadcast/TorrentBroadcast.scala\r\nindex 7b430766851..d9632964e3d 100644\r\n--- a/core/src/main/scala/org/apache/spark/broadcast/TorrentBroadcast.scala\r\n+++ b/core/src/main/scala/org/apache/spark/broadcast/TorrentBroadcast.scala\r\n@@ -29,6 +29,7 @@ import scala.util.Random\r\n import org.apache.spark._\r\n import org.apache.spark.internal.{config, Logging}\r\n import org.apache.spark.io.CompressionCodec\r\n+import org.apache.spark.network.util.JavaUtils\r\n import org.apache.spark.serializer.Serializer\r\n import org.apache.spark.storage._\r\n import org.apache.spark.util.{KeyLock, Utils}\r\n@@ -95,12 +96,16 @@ private[spark] class TorrentBroadcast[T: ClassTag](obj: T, id: Long, serializedO\r\n \r\n   private val broadcastId = BroadcastBlockId(id)\r\n \r\n-  /** Total number of blocks this broadcast variable contains. */\r\n-  private val numBlocks: Int = writeBlocks(obj)\r\n-\r\n   /** The checksum for all the blocks. */\r\n   private var checksums: Array[Int] = _\r\n \r\n+  /** Total number of blocks this broadcast variable contains. */\r\n+  private val (singleBlockData: Array[Byte], numBlocks: Int) = writeBlocks(obj)\r\n+  assert(1 != numBlocks || null != singleBlockData)\r\n+  assert(1 == numBlocks || null == singleBlockData)\r\n+  assert(null != checksums || null != singleBlockData)\r\n+\r\n+\r\n   override protected def getValue() = synchronized {\r\n     val memoized: T = if (_value == null) null.asInstanceOf[T] else _value.get\r\n     if (memoized != null) {\r\n@@ -135,7 +140,23 @@ private[spark] class TorrentBroadcast[T: ClassTag](obj: T, id: Long, serializedO\r\n    * @param value the object to divide\r\n    * @return number of blocks this broadcast variable is divided into\r\n    */\r\n-  private def writeBlocks(value: T): Int = {\r\n+  private def writeBlocks(value: T): (Array[Byte], Int) = {\r\n+\r\n+    val blocks = {\r\n+      try {\r\n+        TorrentBroadcast.blockifyObject(value, blockSize, SparkEnv.get.serializer, compressionCodec)\r\n+      } catch {\r\n+        case t: Throwable =>\r\n+          logError(s\"Store broadcast $broadcastId failed, cannot serialize object\")\r\n+          throw t\r\n+      }\r\n+    }\r\n+\r\n+    if (1 == blocks.length) {\r\n+      // no checksum\r\n+      return (JavaUtils.bufferToArray(blocks(0)), 1)\r\n+    }\r\n+\r\n     import StorageLevel._\r\n     val blockManager = SparkEnv.get.blockManager\r\n     if (serializedOnly && !isLocalMaster) {\r\n@@ -156,8 +177,6 @@ private[spark] class TorrentBroadcast[T: ClassTag](obj: T, id: Long, serializedO\r\n       }\r\n     }\r\n     try {\r\n-      val blocks =\r\n-        TorrentBroadcast.blockifyObject(value, blockSize, SparkEnv.get.serializer, compressionCodec)\r\n       if (checksumEnabled) {\r\n         checksums = new Array[Int](blocks.length)\r\n       }\r\n@@ -172,7 +191,7 @@ private[spark] class TorrentBroadcast[T: ClassTag](obj: T, id: Long, serializedO\r\n             s\"in local BlockManager\")\r\n         }\r\n       }\r\n-      blocks.length\r\n+      (null, blocks.length)\r\n     } catch {\r\n       case t: Throwable =>\r\n         logError(s\"Store broadcast $broadcastId fail, remove all pieces of the broadcast\")\r\n@@ -186,6 +205,14 @@ private[spark] class TorrentBroadcast[T: ClassTag](obj: T, id: Long, serializedO\r\n     // Fetch chunks of data. Note that all these chunks are stored in the BlockManager and reported\r\n     // to the driver, so other executors can pull these chunks from this executor as well.\r\n     val blocks = new Array[BlockData](numBlocks)\r\n+    if (null != singleBlockData) {\r\n+      assert(1 == numBlocks)\r\n+      blocks(0) = new ByteBufferBlockData(\r\n+        new ChunkedByteBuffer(ByteBuffer.wrap(singleBlockData)), false)\r\n+      return blocks\r\n+    }\r\n+\r\n+    assert(1 != numBlocks)\r\n     val bm = SparkEnv.get.blockManager\r\n \r\n     for (pid <- Random.shuffle(Seq.range(0, numBlocks))) {\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1498460524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1505873421",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1505873421",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1505873421,
    "node_id": "IC_kwDOAQXtWs5Zwc4N",
    "user": {
      "login": "liuzqt",
      "id": 22358241,
      "node_id": "MDQ6VXNlcjIyMzU4MjQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22358241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liuzqt",
      "html_url": "https://github.com/liuzqt",
      "followers_url": "https://api.github.com/users/liuzqt/followers",
      "following_url": "https://api.github.com/users/liuzqt/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuzqt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liuzqt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuzqt/subscriptions",
      "organizations_url": "https://api.github.com/users/liuzqt/orgs",
      "repos_url": "https://api.github.com/users/liuzqt/repos",
      "events_url": "https://api.github.com/users/liuzqt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liuzqt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-12T20:18:25Z",
    "updated_at": "2023-04-12T20:18:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think inline it in TorrentBroadcast still suffer from the multiple copies issue. Need to send a id and fetch-when-needed. Might be possible to implement on TorrentBroadcast with slightly API change, but not sure whether this will add more complexity, since there are not too much that we would like to share with current TorrentBroadcast implementation",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1505873421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1506428610",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1506428610",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1506428610,
    "node_id": "IC_kwDOAQXtWs5ZykbC",
    "user": {
      "login": "mridulm",
      "id": 1591700,
      "node_id": "MDQ6VXNlcjE1OTE3MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mridulm",
      "html_url": "https://github.com/mridulm",
      "followers_url": "https://api.github.com/users/mridulm/followers",
      "following_url": "https://api.github.com/users/mridulm/following{/other_user}",
      "gists_url": "https://api.github.com/users/mridulm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mridulm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mridulm/subscriptions",
      "organizations_url": "https://api.github.com/users/mridulm/orgs",
      "repos_url": "https://api.github.com/users/mridulm/repos",
      "events_url": "https://api.github.com/users/mridulm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mridulm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-13T06:37:42Z",
    "updated_at": "2023-04-13T08:13:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Did you check the implementation proposal above @liuzqt ? There should not be a multiple copies issue - it will also get inlined into the task binary - which is already broadcast.\r\nIf I am missing something here, please let me know the details.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1506428610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1514174607",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1514174607",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1514174607,
    "node_id": "IC_kwDOAQXtWs5aQHiP",
    "user": {
      "login": "mridulm",
      "id": 1591700,
      "node_id": "MDQ6VXNlcjE1OTE3MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mridulm",
      "html_url": "https://github.com/mridulm",
      "followers_url": "https://api.github.com/users/mridulm/followers",
      "following_url": "https://api.github.com/users/mridulm/following{/other_user}",
      "gists_url": "https://api.github.com/users/mridulm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mridulm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mridulm/subscriptions",
      "organizations_url": "https://api.github.com/users/mridulm/orgs",
      "repos_url": "https://api.github.com/users/mridulm/repos",
      "events_url": "https://api.github.com/users/mridulm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mridulm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-19T06:00:41Z",
    "updated_at": "2023-04-19T06:01:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Circling back to this - to make sure I clarify: please feel free to use the proposal I detailed above (or some variation of it) @liuzqt !\r\nPlease ping me when you are done, and I will help review it.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1514174607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1516765543",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1516765543",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1516765543,
    "node_id": "IC_kwDOAQXtWs5aaAFn",
    "user": {
      "login": "liuzqt",
      "id": 22358241,
      "node_id": "MDQ6VXNlcjIyMzU4MjQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22358241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liuzqt",
      "html_url": "https://github.com/liuzqt",
      "followers_url": "https://api.github.com/users/liuzqt/followers",
      "following_url": "https://api.github.com/users/liuzqt/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuzqt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liuzqt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuzqt/subscriptions",
      "organizations_url": "https://api.github.com/users/liuzqt/orgs",
      "repos_url": "https://api.github.com/users/liuzqt/repos",
      "events_url": "https://api.github.com/users/liuzqt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liuzqt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-20T18:27:00Z",
    "updated_at": "2023-04-20T18:27:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @mridulm  sorry for the late reply. I'm still confused about the mutiple copies issue, the taskBinary broadcast is created [here](https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/scheduler/DAGScheduler.scala#L1554), when inlining into small broadcast, the taskBinary contains the real data block, and will be sent to executor per-task. Pls correct me if I understand it wrong...",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1516765543/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1517162992",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1517162992",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1517162992,
    "node_id": "IC_kwDOAQXtWs5abhHw",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-21T02:20:29Z",
    "updated_at": "2023-04-21T02:20:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "yea it seems like the same as not using broadcast at all, then the multi-copy issue will appear. We need to still use the block manager to transfer the broadcast data.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1517162992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1517342791",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1517342791",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1517342791,
    "node_id": "IC_kwDOAQXtWs5acNBH",
    "user": {
      "login": "mridulm",
      "id": 1591700,
      "node_id": "MDQ6VXNlcjE1OTE3MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mridulm",
      "html_url": "https://github.com/mridulm",
      "followers_url": "https://api.github.com/users/mridulm/followers",
      "following_url": "https://api.github.com/users/mridulm/following{/other_user}",
      "gists_url": "https://api.github.com/users/mridulm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mridulm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mridulm/subscriptions",
      "organizations_url": "https://api.github.com/users/mridulm/orgs",
      "repos_url": "https://api.github.com/users/mridulm/repos",
      "events_url": "https://api.github.com/users/mridulm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mridulm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-21T06:42:46Z",
    "updated_at": "2023-04-21T06:42:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "A few points to consider:\r\n\r\na) Task binary is already broadcasted - so the inlined versoin should not have an overhead by itself.\r\n\r\nIgnore (a) for time being, \r\n\r\nb) the poc above was a strawman proposal to inline, we can use other strategies for the small block case in torrent broadcast itself - either inline (as in the example), or fetch from block manager directly, etc.\r\n\r\nEssentially, what I am trying to get to is, having users explicitly try to reason about whether their broadcast data is small or large is brittle - this is something that needs to be handled automatically by the broadcast impl seemlessly.\r\nWhen data is small, use more efficient paths, and progressively move to more expensive options when data is larger - without any user code change.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1517342791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1522520810",
    "html_url": "https://github.com/apache/spark/pull/40629#issuecomment-1522520810",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40629",
    "id": 1522520810,
    "node_id": "IC_kwDOAQXtWs5av9Lq",
    "user": {
      "login": "liuzqt",
      "id": 22358241,
      "node_id": "MDQ6VXNlcjIyMzU4MjQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22358241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liuzqt",
      "html_url": "https://github.com/liuzqt",
      "followers_url": "https://api.github.com/users/liuzqt/followers",
      "following_url": "https://api.github.com/users/liuzqt/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuzqt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liuzqt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuzqt/subscriptions",
      "organizations_url": "https://api.github.com/users/liuzqt/orgs",
      "repos_url": "https://api.github.com/users/liuzqt/repos",
      "events_url": "https://api.github.com/users/liuzqt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liuzqt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-25T22:58:19Z",
    "updated_at": "2023-04-25T22:58:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @mridulm agree that the broadcast impl under the hood should not be exposed to user if possible, let me see how we can inline the small broadcast within current broadcast code path based on your poc",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1522520810/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
