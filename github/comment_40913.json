[
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1519049541",
    "html_url": "https://github.com/apache/spark/pull/40913#issuecomment-1519049541",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40913",
    "id": 1519049541,
    "node_id": "IC_kwDOAQXtWs5aittF",
    "user": {
      "login": "bjornjorgensen",
      "id": 47577197,
      "node_id": "MDQ6VXNlcjQ3NTc3MTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47577197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjornjorgensen",
      "html_url": "https://github.com/bjornjorgensen",
      "followers_url": "https://api.github.com/users/bjornjorgensen/followers",
      "following_url": "https://api.github.com/users/bjornjorgensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjornjorgensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjornjorgensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjornjorgensen/subscriptions",
      "organizations_url": "https://api.github.com/users/bjornjorgensen/orgs",
      "repos_url": "https://api.github.com/users/bjornjorgensen/repos",
      "events_url": "https://api.github.com/users/bjornjorgensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjornjorgensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-23T12:01:55Z",
    "updated_at": "2023-04-23T12:08:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "To me it seams like we can just add `show_counts` to this function. We already have this max row to calculate on.   \r\n\r\nOr we can implement something like this..\r\n\r\n```\r\nfrom collections import Counter\r\nfrom pyspark.sql.functions import col, count, when\r\n\r\ndef spark_info(df):\r\n    # Print basic DataFrame information\r\n    print(f\"<class '{df.__class__.__module__}.{df.__class__.__name__}'>\")\r\n    print(f\"Number of rows: {df.count()}\")\r\n    print(f\"Number of columns: {len(df.columns)}\")\r\n\r\n    # Print column header for the detailed DataFrame information\r\n    print(\"\\nColumn\" + \" \" * 110 + \"Non-Null Count\" + \" \" + \"Dtype\")\r\n    print(\"-\" * 6, \" \" * 108, \"-\" * 14, \"-\" * 5)\r\n\r\n    # Calculate non-null counts for each column\r\n    non_null_counts = df.agg(*[count(when(col(f\"`{c}`\").isNotNull(), f\"`{c}`\")).alias(c) for c in df.columns]).collect()[0]\r\n\r\n    # Initialize a counter to store data type counts\r\n    dtype_counter = Counter()\r\n\r\n    # Iterate through the schema fields and print detailed column information\r\n    for i, field in enumerate(df.schema.fields):\r\n        non_null_count = non_null_counts[field.name]\r\n        dtype = field.dataType.simpleString()\r\n        print(f\"{field.name:<90} {non_null_count:>30} non-null {dtype}\")\r\n\r\n        # Update the data type counter\r\n        dtype_counter[dtype] += 1\r\n\r\n    # Print data type summary\r\n    dtypes_summary = \", \".join([f\"{dtype}({count})\" for dtype, count in dtype_counter.items()])\r\n    print(f\"\\ndtypes: {dtypes_summary}\")\r\n ```\r\n\r\n![image](https://user-images.githubusercontent.com/47577197/233838325-b1b7b5ef-b358-4c41-a20c-f841f3484d2c.png)\r\n(...)\r\n\r\n![image](https://user-images.githubusercontent.com/47577197/233838368-5599bfe9-2a05-44d6-b583-cd2bbb444127.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1519049541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1519137932",
    "html_url": "https://github.com/apache/spark/pull/40913#issuecomment-1519137932",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40913",
    "id": 1519137932,
    "node_id": "IC_kwDOAQXtWs5ajDSM",
    "user": {
      "login": "bjornjorgensen",
      "id": 47577197,
      "node_id": "MDQ6VXNlcjQ3NTc3MTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47577197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjornjorgensen",
      "html_url": "https://github.com/bjornjorgensen",
      "followers_url": "https://api.github.com/users/bjornjorgensen/followers",
      "following_url": "https://api.github.com/users/bjornjorgensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjornjorgensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjornjorgensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjornjorgensen/subscriptions",
      "organizations_url": "https://api.github.com/users/bjornjorgensen/orgs",
      "repos_url": "https://api.github.com/users/bjornjorgensen/repos",
      "events_url": "https://api.github.com/users/bjornjorgensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjornjorgensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-23T19:24:37Z",
    "updated_at": "2023-04-23T19:24:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "add Counter to imports \r\n```\r\nfrom collections import defaultdict, namedtuple, Counter\r\n\r\ndef info(\r\n        self,\r\n        verbose: Optional[bool] = None,\r\n        buf: Optional[IO[str]] = None,\r\n        max_cols: Optional[int] = None,\r\n    ) -> None:       \r\n        # To avoid pandas' existing config affects pandas-on-Spark.\r\n        # TODO: should we have corresponding pandas-on-Spark configs?\r\n        #with pd.option_context(\r\n        #    \"display.max_info_columns\", sys.maxsize, \"display.max_info_rows\", sys.maxsize\r\n        #):\r\n        if verbose is None or verbose:\r\n            index_type: Type = type(self.index).__name__\r\n            print(f\"<class '{self.__class__.__module__}.{self.__class__.__name__}'>\")\r\n            print(f\"{index_type}: {len(self)} entries, {self.index.min()} to {self.index.max()}\")\r\n\r\n            # Print column header for the detailed DataFrame information\r\n            print(f\"Data columns (total {len(self.columns)} columns):\")\r\n            print(f\" #   Column{' ' * 106}Non-Null Count  Dtype\")\r\n            print(f\"---  ------{' ' * 106}--------------  -----\")\r\n\r\n        # Calculate non-null counts for each column\r\n        non_null_counts: Dict[str, int] = self.count().to_dict()\r\n\r\n        # Initialize a counter to store data type counts\r\n        dtype_counter: Counter = Counter()\r\n\r\n        # Iterate through the schema fields and print detailed column information\r\n        for idx, column in enumerate(self.columns):\r\n            dtype: str = str(self[column].dtype)\r\n            non_null_count: int = non_null_counts[column]\r\n            if verbose is None or verbose:\r\n                print(f\"{idx:<3} {column:<90} {non_null_count:>30} non-null {dtype}\")\r\n\r\n            # Update the data type counter\r\n            dtype_counter[dtype] += 1\r\n\r\n        if verbose is None or verbose:\r\n            # Print data type summary\r\n            dtypes_summary: str = \", \".join([f\"{dtype}({count})\" for dtype, count in dtype_counter.items()])\r\n            print(f\"\\ndtypes: {dtypes_summary}\")\r\n        elif not verbose:\r\n            print(f\"<class '{self.__class__.__module__}.{self.__class__.__name__}'>\")\r\n            print(f\"Index: {len(self)} entries, {self.index.min()} to {self.index.max()}\")\r\n            print(f\"Columns: {len(self.columns)} entries, {self.columns[0]} to {self.columns[-1]}\")\r\n            dtypes_summary: str = \", \".join([f\"{dtype}({count})\" for dtype, count in dtype_counter.items()])\r\n            print(f\"dtypes: {dtypes_summary}\")\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1519137932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1519205447",
    "html_url": "https://github.com/apache/spark/pull/40913#issuecomment-1519205447",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40913",
    "id": 1519205447,
    "node_id": "IC_kwDOAQXtWs5ajTxH",
    "user": {
      "login": "HyukjinKwon",
      "id": 6477701,
      "node_id": "MDQ6VXNlcjY0Nzc3MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6477701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HyukjinKwon",
      "html_url": "https://github.com/HyukjinKwon",
      "followers_url": "https://api.github.com/users/HyukjinKwon/followers",
      "following_url": "https://api.github.com/users/HyukjinKwon/following{/other_user}",
      "gists_url": "https://api.github.com/users/HyukjinKwon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HyukjinKwon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HyukjinKwon/subscriptions",
      "organizations_url": "https://api.github.com/users/HyukjinKwon/orgs",
      "repos_url": "https://api.github.com/users/HyukjinKwon/repos",
      "events_url": "https://api.github.com/users/HyukjinKwon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HyukjinKwon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-24T00:14:14Z",
    "updated_at": "2023-04-24T00:14:14Z",
    "author_association": "MEMBER",
    "body": "Merged to master.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1519205447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
