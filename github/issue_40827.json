{
  "url": "https://api.github.com/repos/apache/spark/issues/40827",
  "repository_url": "https://api.github.com/repos/apache/spark",
  "labels_url": "https://api.github.com/repos/apache/spark/issues/40827/labels{/name}",
  "comments_url": "https://api.github.com/repos/apache/spark/issues/40827/comments",
  "events_url": "https://api.github.com/repos/apache/spark/issues/40827/events",
  "html_url": "https://github.com/apache/spark/pull/40827",
  "id": 1671887381,
  "node_id": "PR_kwDOAQXtWs5Og9n_",
  "number": 40827,
  "title": "[SPARK-42585][CONNECT] Streaming of local relations",
  "user": {
    "login": "MaxGekk",
    "id": 1580697,
    "node_id": "MDQ6VXNlcjE1ODA2OTc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1580697?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MaxGekk",
    "html_url": "https://github.com/MaxGekk",
    "followers_url": "https://api.github.com/users/MaxGekk/followers",
    "following_url": "https://api.github.com/users/MaxGekk/following{/other_user}",
    "gists_url": "https://api.github.com/users/MaxGekk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MaxGekk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MaxGekk/subscriptions",
    "organizations_url": "https://api.github.com/users/MaxGekk/orgs",
    "repos_url": "https://api.github.com/users/MaxGekk/repos",
    "events_url": "https://api.github.com/users/MaxGekk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MaxGekk/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1405794576,
      "node_id": "MDU6TGFiZWwxNDA1Nzk0NTc2",
      "url": "https://api.github.com/repos/apache/spark/labels/SQL",
      "name": "SQL",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 1981527456,
      "node_id": "MDU6TGFiZWwxOTgxNTI3NDU2",
      "url": "https://api.github.com/repos/apache/spark/labels/CORE",
      "name": "CORE",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 1982260031,
      "node_id": "MDU6TGFiZWwxOTgyMjYwMDMx",
      "url": "https://api.github.com/repos/apache/spark/labels/PYTHON",
      "name": "PYTHON",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 4556440342,
      "node_id": "LA_kwDOAQXtWs8AAAABD5XDFg",
      "url": "https://api.github.com/repos/apache/spark/labels/CONNECT",
      "name": "CONNECT",
      "color": "ededed",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-04-17T20:03:56Z",
  "updated_at": "2023-05-02T00:58:37Z",
  "closed_at": "2023-05-02T00:58:37Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "draft": false,
  "pull_request": {
    "url": "https://api.github.com/repos/apache/spark/pulls/40827",
    "html_url": "https://github.com/apache/spark/pull/40827",
    "diff_url": "https://github.com/apache/spark/pull/40827.diff",
    "patch_url": "https://github.com/apache/spark/pull/40827.patch",
    "merged_at": null
  },
  "body": "### What changes were proposed in this pull request?\r\nIn the PR, I propose to transfer a local relation to the server in streaming way when it exceeds some size which is defined by the SQL config `spark.sql.session.localRelationCacheThreshold`. The config value is 64MB by default. In particular:\r\n1. The client applies the `sha256` function over the arrow form of the local relation;\r\n2. It checks presents of the relation at the server side by sending the relation hash to the server;\r\n3. If the server doesn't have the local relation, the client transfers the local relation as an artefact with the name `cache/<sha256>`;\r\n4. As soon as the relation has presented at the server already, or transferred recently, the client transform the logical plan by replacing the `LocalRelation` node by `CachedLocalRelation` with the hash.\r\n5. On another hand, the server converts `CachedLocalRelation` back to `LocalRelation` by retrieving the relation body from the local cache.\r\n\r\n#### Details of the implementation\r\nThe client sends new command `ArtifactStatusesRequest` to check either the local relation is cached at the server or not. New command comes via new RPC endpoint `ArtifactStatus`. And the server answers by new message `ArtifactStatusesResponse`, see **base.proto**.\r\n\r\nThe client transfers serialized (in avro) body of local relation and its schema via the RPC endpoint `AddArtifacts`. On another hand, the server stores the received artifact in the block manager using the id `CacheId`. The last one has 3 parts:\r\n- `userId` - the identifier of the user that created the local relation,\r\n- `sessionId` - the identifier of the session which the relation belongs to,\r\n- `hash` - a `sha-256` hash over relation body.\r\n\r\nSee **SparkConnectArtifactManager.addArtifact()**.\r\n\r\nThe current query is blocked till the local relation is cached at the server side.\r\n\r\nWhen the server receives the query, it retrieves `userId`, `sessionId` and `hash` from `CachedLocalRelation`, and gets the local relation data from the block manager. See **SparkConnectPlanner.transformCachedLocalRelation()**.\r\n\r\nThe occupied blocks at the block manager are removed when an user session is invalidated in `userSessionMapping`. See **SparkConnectService.RemoveSessionListener** and **BlockManager.removeCache()`**.\r\n \r\n### Why are the changes needed?\r\nTo allow creating a dataframe from a large local collection. `spark.createDataFrame(...)` fails with the following error w/o the changes:\r\n```java\r\n23/04/21 20:32:20 WARN NettyServerStream: Exception processing message\r\norg.sparkproject.connect.grpc.StatusRuntimeException: RESOURCE_EXHAUSTED: gRPC message exceeds maximum size 134217728: 268435456\r\n\tat org.sparkproject.connect.grpc.Status.asRuntimeException(Status.java:526)\r\n```\r\n\r\n### Does this PR introduce _any_ user-facing change?\r\nNo. The changes extend the existing proto API.\r\n\r\n### How was this patch tested?\r\nBy running the new tests:\r\n```\r\n$ build/sbt \"test:testOnly *.ArtifactManagerSuite\"\r\n$ build/sbt \"test:testOnly *.ClientE2ETestSuite\"\r\n$ build/sbt \"test:testOnly *.ArtifactStatusesHandlerSuite\"\r\n```",
  "closed_by": {
    "login": "HyukjinKwon",
    "id": 6477701,
    "node_id": "MDQ6VXNlcjY0Nzc3MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6477701?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/HyukjinKwon",
    "html_url": "https://github.com/HyukjinKwon",
    "followers_url": "https://api.github.com/users/HyukjinKwon/followers",
    "following_url": "https://api.github.com/users/HyukjinKwon/following{/other_user}",
    "gists_url": "https://api.github.com/users/HyukjinKwon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/HyukjinKwon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/HyukjinKwon/subscriptions",
    "organizations_url": "https://api.github.com/users/HyukjinKwon/orgs",
    "repos_url": "https://api.github.com/users/HyukjinKwon/repos",
    "events_url": "https://api.github.com/users/HyukjinKwon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/HyukjinKwon/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/apache/spark/issues/40827/reactions",
    "total_count": 5,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 5,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/apache/spark/issues/40827/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
