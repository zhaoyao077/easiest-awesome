[
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1467245909",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1467245909",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1467245909,
    "node_id": "IC_kwDOAQXtWs5XdGVV",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T02:21:13Z",
    "updated_at": "2023-03-14T02:21:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yea AQE may remove materialized query stages due to optimizations like empty relation propagation, but I think it's fine as the shuffle files are still there (we don't unregister the shuffle), so the reused shuffle operator can still read these shuffle files using the shuffle id. The problem with EXPLAIN is it only looks for the referenced exchange in the query plan tree, I think we can also look up from the AQE stage cache map?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1467245909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1467287615",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1467287615",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1467287615,
    "node_id": "IC_kwDOAQXtWs5XdQg_",
    "user": {
      "login": "StevenChenDatabricks",
      "id": 83618776,
      "node_id": "MDQ6VXNlcjgzNjE4Nzc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/83618776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StevenChenDatabricks",
      "html_url": "https://github.com/StevenChenDatabricks",
      "followers_url": "https://api.github.com/users/StevenChenDatabricks/followers",
      "following_url": "https://api.github.com/users/StevenChenDatabricks/following{/other_user}",
      "gists_url": "https://api.github.com/users/StevenChenDatabricks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StevenChenDatabricks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StevenChenDatabricks/subscriptions",
      "organizations_url": "https://api.github.com/users/StevenChenDatabricks/orgs",
      "repos_url": "https://api.github.com/users/StevenChenDatabricks/repos",
      "events_url": "https://api.github.com/users/StevenChenDatabricks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StevenChenDatabricks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T03:12:59Z",
    "updated_at": "2023-03-14T03:12:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cloud-fan Yes this is purely UI and EXPLAIN issue. It does not affect query execution. \r\n\r\nI'm not sure how AQE context stageCache map would help. The issue in EXPLAIN is that the ReusedExchange.child references a Exchange node that is not referenced anywhere else in the plan tree so we need to generate IDs on the subtree rooted at ReusedExchange.child and print them out. To do this, we need a way to check whether the ReusedExchange.child is referenced anywhere else - if they are not referenced anywhere else, we need to recursively generate IDs for subtree. I keep a HashSet of nodes with IDs already generated and check ReusedExchange.child against it to see if we need to recursively generate IDs on the subtree. ",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1467287615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1468104875",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1468104875",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1468104875,
    "node_id": "IC_kwDOAQXtWs5XgYCr",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T13:28:29Z",
    "updated_at": "2023-03-14T13:28:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@StevenChenDatabricks Thanks for the explanation, now I understand it.\r\n\r\nI still have some high-level questions:\r\n1. Does `ReusedSubquery` have the same issue?\r\n2. what if there are more than one `ReusedExchange`s that references non-existing exchange?\r\n\r\nI have a new idea that we still display `ReusedExchange` as it is, but we add a new section to display non-existing `Exchanges`:\r\n```\r\n==== Adaptively Optimized Out Exchanges ====\r\n(132) Exchange\r\nInput [3]: [sr_customer_sk#217, sr_store_sk#221, sum#327L]\r\nArguments: hashpartitioning(sr_store_sk#221, 200), ENSURE_REQUIREMENTS, [plan_id=1791]\r\n```\r\n\r\nThen there is no duplication even if more than one `ReusedExchange` reference it.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1468104875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1468621742",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1468621742",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1468621742,
    "node_id": "IC_kwDOAQXtWs5XiWOu",
    "user": {
      "login": "StevenChenDatabricks",
      "id": 83618776,
      "node_id": "MDQ6VXNlcjgzNjE4Nzc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/83618776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StevenChenDatabricks",
      "html_url": "https://github.com/StevenChenDatabricks",
      "followers_url": "https://api.github.com/users/StevenChenDatabricks/followers",
      "following_url": "https://api.github.com/users/StevenChenDatabricks/following{/other_user}",
      "gists_url": "https://api.github.com/users/StevenChenDatabricks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StevenChenDatabricks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StevenChenDatabricks/subscriptions",
      "organizations_url": "https://api.github.com/users/StevenChenDatabricks/orgs",
      "repos_url": "https://api.github.com/users/StevenChenDatabricks/repos",
      "events_url": "https://api.github.com/users/StevenChenDatabricks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StevenChenDatabricks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T18:27:22Z",
    "updated_at": "2023-03-14T18:27:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cloud-fan Thanks for the idea and response!\r\n\r\n1. I don't think this issue doesn't affects `ReusedSubquery` because of how its processed and printed. The current algorithm finds all Subquery nodes (including `ReusedSubquery`) and for each Subquery, it traverses the Subquery subtree to generate the IDs if they are missing. \r\nFurthermore, a `ReusedSubquery` does not print the details of the Subquery it reuses whereas for ReusedExchange it does print the Exchange ID being reused. For a `ReusedSubquery`, all that is printed is this line:\r\n```Subquery:5 Hosting operator id = 50 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]```\r\n`Hosting operator ID` is the parent operator that contains the `ReusedSubquery`. The subtree of the `ReusedSubquery` is not printed anywhere and the `ReusedSubquery` node itself is not printed in the main plan tree either. Even if there are non-existing children, the issue is not surfaced in the Explain plan by default.\r\nI guess there's still a chance it might affect Spark UI whereby the IDs in the subtree of a `ReusedSubquery` are incorrect because the IDs were generated in a previous AQE iteration... I'm not sure. I think it's best to wait and see if a ticket/bug like this is ever reported. \r\n\r\n2. My fix detects all the ReusedExchanges with non-existing children and generate IDs on them. I guess your question is what if multiple `ReusedExchange` reference the same non-existing `Exchange`? That's a good point and I need to account for that edge case in the code in case that is possible.\r\n\r\nWith regards to your idea for a section of non-existing `Exchanges`: we already only print each operator exactly once in the node details section. As shown in the PR description: I currently print out the plan subtree of the Non-Existing Exchange below the `ReusedExchange` (since that subtree is not shown anywhere else) and the node details while maintaining uniqueness.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1468621742/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1469073120",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1469073120",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1469073120,
    "node_id": "IC_kwDOAQXtWs5XkEbg",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-15T00:59:05Z",
    "updated_at": "2023-03-15T00:59:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> we already only print each operator exactly once in the node details section\r\n\r\nWhat if more than one `ReusedExchange` referencing the same `Exchange`? Will we print the `Exchange` twice?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1469073120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1469194144",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1469194144",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1469194144,
    "node_id": "IC_kwDOAQXtWs5Xkh-g",
    "user": {
      "login": "StevenChenDatabricks",
      "id": 83618776,
      "node_id": "MDQ6VXNlcjgzNjE4Nzc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/83618776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StevenChenDatabricks",
      "html_url": "https://github.com/StevenChenDatabricks",
      "followers_url": "https://api.github.com/users/StevenChenDatabricks/followers",
      "following_url": "https://api.github.com/users/StevenChenDatabricks/following{/other_user}",
      "gists_url": "https://api.github.com/users/StevenChenDatabricks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StevenChenDatabricks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StevenChenDatabricks/subscriptions",
      "organizations_url": "https://api.github.com/users/StevenChenDatabricks/orgs",
      "repos_url": "https://api.github.com/users/StevenChenDatabricks/repos",
      "events_url": "https://api.github.com/users/StevenChenDatabricks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StevenChenDatabricks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-15T02:16:31Z",
    "updated_at": "2023-03-15T02:16:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cloud-fan It wouldn't because `collectOperatorsWithID` in ExplainUtils is responsible for collecting the list of nodes to print out. It uses a BitSet `collectedOperators` that's globally shared to ensure each node is \"collected\" and printed exactly once.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1469194144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1469225186",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1469225186",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1469225186,
    "node_id": "IC_kwDOAQXtWs5Xkpji",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-15T02:47:39Z",
    "updated_at": "2023-03-15T02:47:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "So we randomly pick one `ReusedExchange` to print its corresponding `Exchange`?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1469225186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1478591539",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1478591539",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1478591539,
    "node_id": "IC_kwDOAQXtWs5YIYQz",
    "user": {
      "login": "StevenChenDatabricks",
      "id": 83618776,
      "node_id": "MDQ6VXNlcjgzNjE4Nzc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/83618776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StevenChenDatabricks",
      "html_url": "https://github.com/StevenChenDatabricks",
      "followers_url": "https://api.github.com/users/StevenChenDatabricks/followers",
      "following_url": "https://api.github.com/users/StevenChenDatabricks/following{/other_user}",
      "gists_url": "https://api.github.com/users/StevenChenDatabricks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StevenChenDatabricks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StevenChenDatabricks/subscriptions",
      "organizations_url": "https://api.github.com/users/StevenChenDatabricks/orgs",
      "repos_url": "https://api.github.com/users/StevenChenDatabricks/repos",
      "events_url": "https://api.github.com/users/StevenChenDatabricks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StevenChenDatabricks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T21:17:05Z",
    "updated_at": "2023-03-21T21:17:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cloud-fan I've addressed your comments. Thanks for the review! ",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1478591539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1478798727",
    "html_url": "https://github.com/apache/spark/pull/40385#issuecomment-1478798727",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40385",
    "id": 1478798727,
    "node_id": "IC_kwDOAQXtWs5YJK2H",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-22T01:28:14Z",
    "updated_at": "2023-03-22T01:28:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks, merging to master/3.4!",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1478798727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
