{
  "url": "https://api.github.com/repos/apache/spark/issues/40373",
  "repository_url": "https://api.github.com/repos/apache/spark",
  "labels_url": "https://api.github.com/repos/apache/spark/issues/40373/labels{/name}",
  "comments_url": "https://api.github.com/repos/apache/spark/issues/40373/comments",
  "events_url": "https://api.github.com/repos/apache/spark/issues/40373/events",
  "html_url": "https://github.com/apache/spark/pull/40373",
  "id": 1619653803,
  "node_id": "PR_kwDOAQXtWs5LzXpl",
  "number": 40373,
  "title": "[Draft] Streaming Spark Connect POC",
  "user": {
    "login": "rangadi",
    "id": 502522,
    "node_id": "MDQ6VXNlcjUwMjUyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/502522?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rangadi",
    "html_url": "https://github.com/rangadi",
    "followers_url": "https://api.github.com/users/rangadi/followers",
    "following_url": "https://api.github.com/users/rangadi/following{/other_user}",
    "gists_url": "https://api.github.com/users/rangadi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rangadi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rangadi/subscriptions",
    "organizations_url": "https://api.github.com/users/rangadi/orgs",
    "repos_url": "https://api.github.com/users/rangadi/repos",
    "events_url": "https://api.github.com/users/rangadi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rangadi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1405794576,
      "node_id": "MDU6TGFiZWwxNDA1Nzk0NTc2",
      "url": "https://api.github.com/repos/apache/spark/labels/SQL",
      "name": "SQL",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 1406587328,
      "node_id": "MDU6TGFiZWwxNDA2NTg3MzI4",
      "url": "https://api.github.com/repos/apache/spark/labels/STRUCTURED%20STREAMING",
      "name": "STRUCTURED STREAMING",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 1406627200,
      "node_id": "MDU6TGFiZWwxNDA2NjI3MjAw",
      "url": "https://api.github.com/repos/apache/spark/labels/BUILD",
      "name": "BUILD",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 1981527456,
      "node_id": "MDU6TGFiZWwxOTgxNTI3NDU2",
      "url": "https://api.github.com/repos/apache/spark/labels/CORE",
      "name": "CORE",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 1982260031,
      "node_id": "MDU6TGFiZWwxOTgyMjYwMDMx",
      "url": "https://api.github.com/repos/apache/spark/labels/PYTHON",
      "name": "PYTHON",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 4556440342,
      "node_id": "LA_kwDOAQXtWs8AAAABD5XDFg",
      "url": "https://api.github.com/repos/apache/spark/labels/CONNECT",
      "name": "CONNECT",
      "color": "ededed",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-03-10T21:40:11Z",
  "updated_at": "2023-04-07T16:09:51Z",
  "closed_at": "2023-04-07T16:09:51Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "draft": true,
  "pull_request": {
    "url": "https://api.github.com/repos/apache/spark/pulls/40373",
    "html_url": "https://github.com/apache/spark/pull/40373",
    "diff_url": "https://github.com/apache/spark/pull/40373.diff",
    "patch_url": "https://github.com/apache/spark/pull/40373.patch",
    "merged_at": null
  },
  "body": "[This is not meant for merge, but a preliminary POC for streaming support in Spark Connect].\r\n\r\nThis includes basic functionality to run streaming queries over spark connect. \r\nExpectation is 1:1 parity with standard streaming API.\r\n\r\nHow to try it in local mode ( `./bin/pyspark --remote \"local[*]\"`)\r\n```\r\n>>> \r\n>>> query = ( \r\n...   spark\r\n...     .readStream\r\n...     .format(\"rate\")\r\n...     .option(\"numPartitions\", \"1\")\r\n...     .load()\r\n...     .withWatermark(\"timestamp\", \"1 minute\")\r\n...     .groupBy(window(\"timestamp\", \"10 seconds\"))\r\n...     .count() # count for each 10 sedonds.\r\n...     .writeStream\r\n...     .format(\"memory\")\r\n...     .queryName(\"rate_table\")\r\n...     .trigger(processingTime=\"10 seconds\")\r\n...     .start()\r\n... )\r\n>>>\r\n>>> query.isActive\r\nTrue\r\n>>> \r\n>>> >>> spark.sql(\"select window.start, count from rate_table\").show()\r\n+-------------------+-----+\r\n|              start|count|\r\n+-------------------+-----+\r\n|2023-03-11 22:45:40|    6|\r\n|2023-03-11 22:45:50|   10|\r\n+-------------------+-----+\r\n>>> \r\n>>> # Query Status\r\n>>> print(json.dumps(query.status, indent=4))\r\n{\r\n    \"message\": \"Waiting for next trigger\",\r\n    \"isDataAvailable\": true,\r\n    \"isTriggerActive\": false\r\n}\r\n\r\n>>> # Streaming Progress (lastProgress)\r\n>>> print(json.dumps(query.lastProgress, indent=4))\r\n{\r\n    \"id\": \"88064cec-3418-4ad3-90aa-17043458f540\",\r\n    \"runId\": \"24ff7f44-7f4b-424a-b632-dad62c6c92dd\",\r\n    \"name\": \"rate_table\",\r\n    \"timestamp\": \"2023-03-12T06:48:40.006Z\",\r\n    \"batchId\": 18,\r\n    \"numInputRows\": 10,\r\n    \"inputRowsPerSecond\": 0.9997000899730081,\r\n    \"processedRowsPerSecond\": 33.670033670033675,\r\n    \"durationMs\": {\r\n        \"addBatch\": 109,\r\n        \"commitOffsets\": 85,\r\n        \"getBatch\": 0,\r\n        \"latestOffset\": 0,\r\n        \"queryPlanning\": 5,\r\n        \"triggerExecution\": 297,\r\n        \"walCommit\": 98\r\n    },\r\n    \"eventTime\": {\r\n        \"avg\": \"2023-03-12T06:48:34.306Z\",\r\n        \"max\": \"2023-03-12T06:48:38.806Z\",\r\n        \"min\": \"2023-03-12T06:48:29.806Z\",\r\n        \"watermark\": \"2023-03-12T06:47:28.806Z\"\r\n    },\r\n    \"stateOperators\": [\r\n        {\r\n            \"operatorName\": \"stateStoreSave\",\r\n            \"numRowsTotal\": 8,\r\n            \"numRowsUpdated\": 2,\r\n     [...]\r\n\r\n>>> query.stop()\r\n```\r\n\r\n### Next steps:\r\nWe need add remaining features : \r\n * Scala API\r\n * Streaming listener\r\n * Unimplemented / missing APIs. e.g.\r\n   * All the triggers\r\n   * to_table() \r\n   * text() etc.\r\n * StreamingQueryManager API\r\n * tests, including running existing tests with spark-connect\r\n * and some more.",
  "closed_by": {
    "login": "rangadi",
    "id": 502522,
    "node_id": "MDQ6VXNlcjUwMjUyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/502522?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rangadi",
    "html_url": "https://github.com/rangadi",
    "followers_url": "https://api.github.com/users/rangadi/followers",
    "following_url": "https://api.github.com/users/rangadi/following{/other_user}",
    "gists_url": "https://api.github.com/users/rangadi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rangadi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rangadi/subscriptions",
    "organizations_url": "https://api.github.com/users/rangadi/orgs",
    "repos_url": "https://api.github.com/users/rangadi/repos",
    "events_url": "https://api.github.com/users/rangadi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rangadi/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/apache/spark/issues/40373/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/apache/spark/issues/40373/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
