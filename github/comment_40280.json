[
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1454964971",
    "html_url": "https://github.com/apache/spark/pull/40280#issuecomment-1454964971",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40280",
    "id": 1454964971,
    "node_id": "IC_kwDOAQXtWs5WuQDr",
    "user": {
      "login": "panbingkun",
      "id": 15246973,
      "node_id": "MDQ6VXNlcjE1MjQ2OTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15246973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/panbingkun",
      "html_url": "https://github.com/panbingkun",
      "followers_url": "https://api.github.com/users/panbingkun/followers",
      "following_url": "https://api.github.com/users/panbingkun/following{/other_user}",
      "gists_url": "https://api.github.com/users/panbingkun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/panbingkun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/panbingkun/subscriptions",
      "organizations_url": "https://api.github.com/users/panbingkun/orgs",
      "repos_url": "https://api.github.com/users/panbingkun/repos",
      "events_url": "https://api.github.com/users/panbingkun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/panbingkun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-05T02:30:01Z",
    "updated_at": "2023-03-05T02:30:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "### Full stack:\r\n\r\nINTERNAL: \r\n[PARSE_SYNTAX_ERROR] Syntax error at or near '<': extra input '<'.(line 1, pos 6)\r\n\r\n== SQL ==\r\nstruct<c1:struct<c1-1:string,c1-2:string>>\r\n------^^^\r\n\r\nio.grpc.StatusRuntimeException: INTERNAL: \r\n[PARSE_SYNTAX_ERROR] Syntax error at or near '<': extra input '<'.(line 1, pos 6)\r\n\r\n== SQL ==\r\nstruct<c1:struct<c1-1:string,c1-2:string>>\r\n------^^^\r\n\r\n\tat io.grpc.Status.asRuntimeException(Status.java:535)\r\n\tat io.grpc.stub.ClientCalls$BlockingResponseStream.hasNext(ClientCalls.java:660)\r\n\tat org.apache.spark.sql.connect.client.SparkResult.org$apache$spark$sql$connect$client$SparkResult$$processResponses(SparkResult.scala:61)\r\n\tat org.apache.spark.sql.connect.client.SparkResult.length(SparkResult.scala:106)\r\n\tat org.apache.spark.sql.Dataset.$anonfun$show$2(Dataset.scala:529)\r\n\tat org.apache.spark.sql.Dataset.$anonfun$show$2$adapted(Dataset.scala:528)\r\n\tat org.apache.spark.sql.Dataset.withResult(Dataset.scala:2752)\r\n\tat org.apache.spark.sql.Dataset.show(Dataset.scala:528)\r\n\tat org.apache.spark.sql.Dataset.show(Dataset.scala:444)\r\n\tat org.apache.spark.sql.Dataset.show(Dataset.scala:399)\r\n\tat org.apache.spark.sql.Dataset.show(Dataset.scala:408)\r\n\tat org.apache.spark.sql.ClientE2ETestSuite.$anonfun$new$85(ClientE2ETestSuite.scala:608)\r\n\tat scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)\r\n\tat org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)\r\n\tat org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)\r\n\tat org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)\r\n\tat org.scalatest.Transformer.apply(Transformer.scala:22)\r\n\tat org.scalatest.Transformer.apply(Transformer.scala:20)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:226)\r\n\tat org.scalatest.TestSuite.withFixture(TestSuite.scala:196)\r\n\tat org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)\r\n\tat org.scalatest.funsuite.AnyFunSuite.withFixture(AnyFunSuite.scala:1564)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:224)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:236)\r\n\tat org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:236)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:218)\r\n\tat org.scalatest.funsuite.AnyFunSuite.runTest(AnyFunSuite.scala:1564)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTests$1(AnyFunSuiteLike.scala:269)\r\n\tat org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)\r\n\tat scala.collection.immutable.List.foreach(List.scala:431)\r\n\tat org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)\r\n\tat org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)\r\n\tat org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.runTests(AnyFunSuiteLike.scala:269)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.runTests$(AnyFunSuiteLike.scala:268)\r\n\tat org.scalatest.funsuite.AnyFunSuite.runTests(AnyFunSuite.scala:1564)\r\n\tat org.scalatest.Suite.run(Suite.scala:1114)\r\n\tat org.scalatest.Suite.run$(Suite.scala:1096)\r\n\tat org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1564)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:273)\r\n\tat org.scalatest.SuperEngine.runImpl(Engine.scala:535)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:273)\r\n\tat org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:272)\r\n\tat org.apache.spark.sql.ClientE2ETestSuite.org$scalatest$BeforeAndAfterAll$$super$run(ClientE2ETestSuite.scala:34)\r\n\tat org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)\r\n\tat org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)\r\n\tat org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)\r\n\tat org.apache.spark.sql.ClientE2ETestSuite.run(ClientE2ETestSuite.scala:34)\r\n\tat org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:47)\r\n\tat org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1321)\r\n\tat org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1315)\r\n\tat scala.collection.immutable.List.foreach(List.scala:431)\r\n\tat org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1315)\r\n\tat org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:992)\r\n\tat org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:970)\r\n\tat org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1481)\r\n\tat org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:970)\r\n\tat org.scalatest.tools.Runner$.run(Runner.scala:798)\r\n\tat org.scalatest.tools.Runner.run(Runner.scala)\r\n\tat org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner.runScalaTest2or3(ScalaTestRunner.java:43)\r\n\tat org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner.main(ScalaTestRunner.java:26)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1454964971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1454967088",
    "html_url": "https://github.com/apache/spark/pull/40280#issuecomment-1454967088",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40280",
    "id": 1454967088,
    "node_id": "IC_kwDOAQXtWs5WuQkw",
    "user": {
      "login": "panbingkun",
      "id": 15246973,
      "node_id": "MDQ6VXNlcjE1MjQ2OTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15246973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/panbingkun",
      "html_url": "https://github.com/panbingkun",
      "followers_url": "https://api.github.com/users/panbingkun/followers",
      "following_url": "https://api.github.com/users/panbingkun/following{/other_user}",
      "gists_url": "https://api.github.com/users/panbingkun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/panbingkun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/panbingkun/subscriptions",
      "organizations_url": "https://api.github.com/users/panbingkun/orgs",
      "repos_url": "https://api.github.com/users/panbingkun/repos",
      "events_url": "https://api.github.com/users/panbingkun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/panbingkun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-05T02:39:47Z",
    "updated_at": "2023-03-05T02:39:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @hvanhovell ",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1454967088/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1455567210",
    "html_url": "https://github.com/apache/spark/pull/40280#issuecomment-1455567210",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40280",
    "id": 1455567210,
    "node_id": "IC_kwDOAQXtWs5WwjFq",
    "user": {
      "login": "itholic",
      "id": 44108233,
      "node_id": "MDQ6VXNlcjQ0MTA4MjMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/44108233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itholic",
      "html_url": "https://github.com/itholic",
      "followers_url": "https://api.github.com/users/itholic/followers",
      "following_url": "https://api.github.com/users/itholic/following{/other_user}",
      "gists_url": "https://api.github.com/users/itholic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itholic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itholic/subscriptions",
      "organizations_url": "https://api.github.com/users/itholic/orgs",
      "repos_url": "https://api.github.com/users/itholic/repos",
      "events_url": "https://api.github.com/users/itholic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itholic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-06T07:10:51Z",
    "updated_at": "2023-03-06T07:10:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @panbingkun for the nice fix!\r\nBtw, think I found another `createDataFrame` bug which is not working properly with non-nullable schema as below:\r\n```python\r\n>>> from pyspark.sql.types import *\r\n>>> schema_false = StructType([StructField(\"id\", IntegerType(), False)])\r\n>>> spark.createDataFrame([[1]], schema=schema_false)\r\nTraceback (most recent call last):\r\n...\r\npyspark.errors.exceptions.connect.AnalysisException: [NULLABLE_COLUMN_OR_FIELD] Column or field `id` is nullable while it's required to be non-nullable.\r\n```\r\nwhereas working find with nullable schema as below:\r\n```python\r\n>>> schema_true = StructType([StructField(\"id\", IntegerType(), True)])\r\n>>> spark.createDataFrame([[1]], schema=schema_true)\r\nDataFrame[id: int]\r\n```\r\n\r\nDo you have any idea what might be causing this? Could you take a look at it if you're interested in? I have filed an issue at SPARK-42679.\r\n\r\nAlso cc @hvanhovell as an original author for `createDataFrame`.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1455567210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1457349284",
    "html_url": "https://github.com/apache/spark/pull/40280#issuecomment-1457349284",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40280",
    "id": 1457349284,
    "node_id": "IC_kwDOAQXtWs5W3WKk",
    "user": {
      "login": "panbingkun",
      "id": 15246973,
      "node_id": "MDQ6VXNlcjE1MjQ2OTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15246973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/panbingkun",
      "html_url": "https://github.com/panbingkun",
      "followers_url": "https://api.github.com/users/panbingkun/followers",
      "following_url": "https://api.github.com/users/panbingkun/following{/other_user}",
      "gists_url": "https://api.github.com/users/panbingkun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/panbingkun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/panbingkun/subscriptions",
      "organizations_url": "https://api.github.com/users/panbingkun/orgs",
      "repos_url": "https://api.github.com/users/panbingkun/repos",
      "events_url": "https://api.github.com/users/panbingkun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/panbingkun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T01:37:02Z",
    "updated_at": "2023-03-07T01:37:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Thanks @panbingkun for the nice fix! Btw, think I found another `createDataFrame` bug which is not working properly with non-nullable schema as below:\r\n> \r\n> ```python\r\n> >>> from pyspark.sql.types import *\r\n> >>> schema_false = StructType([StructField(\"id\", IntegerType(), False)])\r\n> >>> spark.createDataFrame([[1]], schema=schema_false)\r\n> Traceback (most recent call last):\r\n> ...\r\n> pyspark.errors.exceptions.connect.AnalysisException: [NULLABLE_COLUMN_OR_FIELD] Column or field `id` is nullable while it's required to be non-nullable.\r\n> ```\r\n> \r\n> whereas working find with nullable schema as below:\r\n> \r\n> ```python\r\n> >>> schema_true = StructType([StructField(\"id\", IntegerType(), True)])\r\n> >>> spark.createDataFrame([[1]], schema=schema_true)\r\n> DataFrame[id: int]\r\n> ```\r\n> \r\n> Do you have any idea what might be causing this? Could you take a look at it if you're interested in? I have filed an issue at [SPARK-42679](https://issues.apache.org/jira/browse/SPARK-42679).\r\n> \r\n> Also cc @hvanhovell as an original author for `createDataFrame`.\r\n\r\nLet me try to investigate it.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1457349284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1457558427",
    "html_url": "https://github.com/apache/spark/pull/40280#issuecomment-1457558427",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40280",
    "id": 1457558427,
    "node_id": "IC_kwDOAQXtWs5W4JOb",
    "user": {
      "login": "itholic",
      "id": 44108233,
      "node_id": "MDQ6VXNlcjQ0MTA4MjMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/44108233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itholic",
      "html_url": "https://github.com/itholic",
      "followers_url": "https://api.github.com/users/itholic/followers",
      "following_url": "https://api.github.com/users/itholic/following{/other_user}",
      "gists_url": "https://api.github.com/users/itholic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itholic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itholic/subscriptions",
      "organizations_url": "https://api.github.com/users/itholic/orgs",
      "repos_url": "https://api.github.com/users/itholic/repos",
      "events_url": "https://api.github.com/users/itholic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itholic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T05:24:00Z",
    "updated_at": "2023-03-07T05:24:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @panbingkun !\r\nBy the way, I think this issue has a pretty high priority since the default nullability of a schema is `False`.\r\n\r\n```python\r\n>>> sdf = spark.range(10).schema\r\nself._schema: StructType([StructField('id', LongType(), False)])\r\n```\r\n\r\nFor example, even intuitive and simple code like creating a DataFrame from a pandas DataFrame fails as follows:\r\n```python\r\n>>> sdf = spark.range(10)\r\n>>> pdf = sdf.toPandas()\r\n>>> spark.createDataFrame(pdf, sdf.schema)\r\nTraceback (most recent call last):\r\n...\r\npyspark.errors.exceptions.connect.AnalysisException: [NULLABLE_COLUMN_OR_FIELD] Column or field `id` is nullable while it's required to be non-nullable.\r\n```\r\n\r\nPlease feel free to ping me anytime if you need any help!\r\nThanks again for your time on investigating this :-)",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1457558427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1458081353",
    "html_url": "https://github.com/apache/spark/pull/40280#issuecomment-1458081353",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40280",
    "id": 1458081353,
    "node_id": "IC_kwDOAQXtWs5W6I5J",
    "user": {
      "login": "panbingkun",
      "id": 15246973,
      "node_id": "MDQ6VXNlcjE1MjQ2OTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15246973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/panbingkun",
      "html_url": "https://github.com/panbingkun",
      "followers_url": "https://api.github.com/users/panbingkun/followers",
      "following_url": "https://api.github.com/users/panbingkun/following{/other_user}",
      "gists_url": "https://api.github.com/users/panbingkun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/panbingkun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/panbingkun/subscriptions",
      "organizations_url": "https://api.github.com/users/panbingkun/orgs",
      "repos_url": "https://api.github.com/users/panbingkun/repos",
      "events_url": "https://api.github.com/users/panbingkun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/panbingkun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T12:24:34Z",
    "updated_at": "2023-03-07T12:25:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Thanks, @panbingkun ! By the way, I think this issue has a pretty high priority since the default nullability of a schema is `False`.\r\n> \r\n> ```python\r\n> >>> sdf = spark.range(10).schema\r\n> self._schema: StructType([StructField('id', LongType(), False)])\r\n> ```\r\n> \r\n> For example, even intuitive and simple code like creating a DataFrame from a pandas DataFrame fails as follows:\r\n> \r\n> ```python\r\n> >>> sdf = spark.range(10)\r\n> >>> pdf = sdf.toPandas()\r\n> >>> spark.createDataFrame(pdf, sdf.schema)\r\n> Traceback (most recent call last):\r\n> ...\r\n> pyspark.errors.exceptions.connect.AnalysisException: [NULLABLE_COLUMN_OR_FIELD] Column or field `id` is nullable while it's required to be non-nullable.\r\n> ```\r\n> \r\n> Please feel free to ping me anytime if you need any help! Thanks again for your time on investigating this :-)\r\n\r\n\r\nI have found root cause. Let me think about how to fix it.\r\nTemporary solutions: https://github.com/apache/spark/pull/40316",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1458081353/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1458111230",
    "html_url": "https://github.com/apache/spark/pull/40280#issuecomment-1458111230",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40280",
    "id": 1458111230,
    "node_id": "IC_kwDOAQXtWs5W6QL-",
    "user": {
      "login": "itholic",
      "id": 44108233,
      "node_id": "MDQ6VXNlcjQ0MTA4MjMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/44108233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itholic",
      "html_url": "https://github.com/itholic",
      "followers_url": "https://api.github.com/users/itholic/followers",
      "following_url": "https://api.github.com/users/itholic/following{/other_user}",
      "gists_url": "https://api.github.com/users/itholic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itholic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itholic/subscriptions",
      "organizations_url": "https://api.github.com/users/itholic/orgs",
      "repos_url": "https://api.github.com/users/itholic/repos",
      "events_url": "https://api.github.com/users/itholic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itholic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T12:45:47Z",
    "updated_at": "2023-03-07T12:46:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Awesome!! Let me take a look at your PR when it's ready.\r\nThanks!",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1458111230/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
