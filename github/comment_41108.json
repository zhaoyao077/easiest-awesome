[
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1540562071",
    "html_url": "https://github.com/apache/spark/pull/41108#issuecomment-1540562071",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/41108",
    "id": 1540562071,
    "node_id": "IC_kwDOAQXtWs5b0xyX",
    "user": {
      "login": "justaparth",
      "id": 1002986,
      "node_id": "MDQ6VXNlcjEwMDI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1002986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/justaparth",
      "html_url": "https://github.com/justaparth",
      "followers_url": "https://api.github.com/users/justaparth/followers",
      "following_url": "https://api.github.com/users/justaparth/following{/other_user}",
      "gists_url": "https://api.github.com/users/justaparth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/justaparth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/justaparth/subscriptions",
      "organizations_url": "https://api.github.com/users/justaparth/orgs",
      "repos_url": "https://api.github.com/users/justaparth/repos",
      "events_url": "https://api.github.com/users/justaparth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/justaparth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-09T17:14:20Z",
    "updated_at": "2023-05-09T17:14:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @rangadi i've made a draft implementation here but just wanted to get your thoughts quickly on:\r\n\r\n1. does the problem / solution make sense?\r\n2. should we make this behavior the default or should we add an option to turn it on? \r\n\r\nthanks 🙏 ",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1540562071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1543602788",
    "html_url": "https://github.com/apache/spark/pull/41108#issuecomment-1543602788",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/41108",
    "id": 1543602788,
    "node_id": "IC_kwDOAQXtWs5cAYJk",
    "user": {
      "login": "justaparth",
      "id": 1002986,
      "node_id": "MDQ6VXNlcjEwMDI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1002986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/justaparth",
      "html_url": "https://github.com/justaparth",
      "followers_url": "https://api.github.com/users/justaparth/followers",
      "following_url": "https://api.github.com/users/justaparth/following{/other_user}",
      "gists_url": "https://api.github.com/users/justaparth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/justaparth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/justaparth/subscriptions",
      "organizations_url": "https://api.github.com/users/justaparth/orgs",
      "repos_url": "https://api.github.com/users/justaparth/repos",
      "events_url": "https://api.github.com/users/justaparth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/justaparth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T08:54:03Z",
    "updated_at": "2023-05-11T08:54:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "also cc @HyukjinKwon as you reviewed https://github.com/apache/spark/pull/31921 and have reviewed many proto changes too 😅 ",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1543602788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1547235141",
    "html_url": "https://github.com/apache/spark/pull/41108#issuecomment-1547235141",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/41108",
    "id": 1547235141,
    "node_id": "IC_kwDOAQXtWs5cOO9F",
    "user": {
      "login": "rangadi",
      "id": 502522,
      "node_id": "MDQ6VXNlcjUwMjUyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/502522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rangadi",
      "html_url": "https://github.com/rangadi",
      "followers_url": "https://api.github.com/users/rangadi/followers",
      "following_url": "https://api.github.com/users/rangadi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rangadi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rangadi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rangadi/subscriptions",
      "organizations_url": "https://api.github.com/users/rangadi/orgs",
      "repos_url": "https://api.github.com/users/rangadi/repos",
      "events_url": "https://api.github.com/users/rangadi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rangadi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-15T05:59:42Z",
    "updated_at": "2023-05-15T05:59:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Where is the information loss or overflow? Java code generated by Protobuf for a uint32 field also returns an `int`, not `long`.  ",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1547235141/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1556292297",
    "html_url": "https://github.com/apache/spark/pull/41108#issuecomment-1556292297",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/41108",
    "id": 1556292297,
    "node_id": "IC_kwDOAQXtWs5cwyLJ",
    "user": {
      "login": "justaparth",
      "id": 1002986,
      "node_id": "MDQ6VXNlcjEwMDI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1002986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/justaparth",
      "html_url": "https://github.com/justaparth",
      "followers_url": "https://api.github.com/users/justaparth/followers",
      "following_url": "https://api.github.com/users/justaparth/following{/other_user}",
      "gists_url": "https://api.github.com/users/justaparth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/justaparth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/justaparth/subscriptions",
      "organizations_url": "https://api.github.com/users/justaparth/orgs",
      "repos_url": "https://api.github.com/users/justaparth/repos",
      "events_url": "https://api.github.com/users/justaparth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/justaparth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-21T21:05:40Z",
    "updated_at": "2023-05-22T09:17:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Where is the information loss or overflow? Java code generated by Protobuf for a uint32 field also returns an `int`, not `long`.\r\n\r\nsorry i didn't get a chance to reply to this until now. There is no information loss, technically, as uint32 is 4 bytes and uint64 is 8 bytes, same as int and long respectively. However, there is overflow in the representation.\r\n\r\nHere's an example:\r\n\r\nConsider a protobuf message like:\r\n```\r\nsyntax = \"proto3\";\r\n\r\nmessage Test {\r\n  uint64 val = 1;\r\n}\r\n```\r\n\r\nGenerate a protobuf with a value above 2^63. I did this in python with a small script like:\r\n\r\n```\r\nimport test_pb2\r\n\r\ns = test_pb2.Test()\r\ns.val = 9223372036854775809 # 2**63 + 1\r\nserialized = s.SerializeToString()\r\nprint(serialized)\r\n```\r\n\r\nThis generates the binary representation:\r\n\r\n```\r\nb'\\x08\\x81\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x01'\r\n```\r\n\r\nThen, deserialize this using `from_protobuf`. I did this in a notebook so its easier to see, but could reproduce in a scala test as well:\r\n\r\n<img width=\"597\" alt=\"image\" src=\"https://github.com/apache/spark/assets/1002986/a6c58c19-b9d3-44d4-8c2a-605991d3d5de\">\r\n\r\n\r\nThis is exactly what we'd expect when you take a 64 bit number with the highest bit as `1` and then try to interpret it as a signed number (long), it becomes negative.\r\n\r\nSo this PR proposes some changes to the deserialization behavior. However, I don't know if its right to change the default or have an option to allow unpacking as a larger type.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1556292297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1557649439",
    "html_url": "https://github.com/apache/spark/pull/41108#issuecomment-1557649439",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/41108",
    "id": 1557649439,
    "node_id": "IC_kwDOAQXtWs5c19gf",
    "user": {
      "login": "rangadi",
      "id": 502522,
      "node_id": "MDQ6VXNlcjUwMjUyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/502522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rangadi",
      "html_url": "https://github.com/rangadi",
      "followers_url": "https://api.github.com/users/rangadi/followers",
      "following_url": "https://api.github.com/users/rangadi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rangadi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rangadi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rangadi/subscriptions",
      "organizations_url": "https://api.github.com/users/rangadi/orgs",
      "repos_url": "https://api.github.com/users/rangadi/repos",
      "events_url": "https://api.github.com/users/rangadi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rangadi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-22T17:52:50Z",
    "updated_at": "2023-05-22T17:52:50Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  So this PR proposes some changes to the deserialization behavior. However, I don't know if its right to change the default or have an option to allow unpacking as a larger type.\r\n\r\nWhat if you have a UDF that converts this to BigDecimal? Will you get the value back?\r\nI guess that is the intention behind why protobuf-java casts unsiged to signed in its Java methods. \r\nI think it simpler to go this way. Given these kinds of issues, I guess it is not a good practice to use unsiged in protobuf. It can be intepreted correctly at application level when they are infact used this way.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1557649439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1557723788",
    "html_url": "https://github.com/apache/spark/pull/41108#issuecomment-1557723788",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/41108",
    "id": 1557723788,
    "node_id": "IC_kwDOAQXtWs5c2PqM",
    "user": {
      "login": "justaparth",
      "id": 1002986,
      "node_id": "MDQ6VXNlcjEwMDI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1002986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/justaparth",
      "html_url": "https://github.com/justaparth",
      "followers_url": "https://api.github.com/users/justaparth/followers",
      "following_url": "https://api.github.com/users/justaparth/following{/other_user}",
      "gists_url": "https://api.github.com/users/justaparth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/justaparth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/justaparth/subscriptions",
      "organizations_url": "https://api.github.com/users/justaparth/orgs",
      "repos_url": "https://api.github.com/users/justaparth/repos",
      "events_url": "https://api.github.com/users/justaparth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/justaparth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-22T18:45:10Z",
    "updated_at": "2023-05-22T18:45:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What if you have a UDF that converts this to BigDecimal? Will you get the value back? I guess that is the intention behind why protobuf-java casts unsiged to signed in its Java methods. I think it simpler to go this way. \r\n\r\nYeah, there is no information loss so you can get the right value the way I did in this PR (Integer.toUnsignedLong, Long.toUnsignedString). I think, though, it's useful if the `spark-protobuf` library can do this; the burden of taking a struct and trying to do this transformation is cumbersome, in my opinion.\r\n\r\nHowever, one additional piece of information is that **for unsigned types in parquet, the default behavior is to represent them in larger types**. I put this in the PR description but see this ticket https://issues.apache.org/jira/browse/SPARK-34817 implemented in this PR: https://github.com/apache/spark/pull/31921. Or the existing code today https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/parquet/ParquetSchemaConverter.scala#L243-L247 which shows that **by default** parquet unsigned values are actually expanded to larger types in spark.\r\n\r\nSo, since this same problem/solution exists in another storage format, I think its useful to implement this behavior here as well. I also think that it actually _does_ make sense to do it by default, as parquet already does this. However, i'm open also to doing this transformation behind an option so that no existing usages are broken. Mainly, I want to just make sure we do  what is the most correct and broadly consistent thing to do (and i'm not really sure exactly what that is, and would love some other inputs). cc @HyukjinKwon as well here since you reviewed the original PR doing this for parquet!\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1557723788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
