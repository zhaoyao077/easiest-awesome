{
  "url": "https://api.github.com/repos/apache/spark/issues/40983",
  "repository_url": "https://api.github.com/repos/apache/spark",
  "labels_url": "https://api.github.com/repos/apache/spark/issues/40983/labels{/name}",
  "comments_url": "https://api.github.com/repos/apache/spark/issues/40983/comments",
  "events_url": "https://api.github.com/repos/apache/spark/issues/40983/events",
  "html_url": "https://github.com/apache/spark/pull/40983",
  "id": 1687587102,
  "node_id": "PR_kwDOAQXtWs5PVgEa",
  "number": 40983,
  "title": "[SPARK-43312][PROTOBUF] Option to convert Any fields into JSON",
  "user": {
    "login": "rangadi",
    "id": 502522,
    "node_id": "MDQ6VXNlcjUwMjUyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/502522?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rangadi",
    "html_url": "https://github.com/rangadi",
    "followers_url": "https://api.github.com/users/rangadi/followers",
    "following_url": "https://api.github.com/users/rangadi/following{/other_user}",
    "gists_url": "https://api.github.com/users/rangadi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rangadi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rangadi/subscriptions",
    "organizations_url": "https://api.github.com/users/rangadi/orgs",
    "repos_url": "https://api.github.com/users/rangadi/repos",
    "events_url": "https://api.github.com/users/rangadi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rangadi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1405794576,
      "node_id": "MDU6TGFiZWwxNDA1Nzk0NTc2",
      "url": "https://api.github.com/repos/apache/spark/labels/SQL",
      "name": "SQL",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 1406627200,
      "node_id": "MDU6TGFiZWwxNDA2NjI3MjAw",
      "url": "https://api.github.com/repos/apache/spark/labels/BUILD",
      "name": "BUILD",
      "color": "ededed",
      "default": false,
      "description": null
    },
    {
      "id": 4654282764,
      "node_id": "LA_kwDOAQXtWs8AAAABFWq4DA",
      "url": "https://api.github.com/repos/apache/spark/labels/PROTOBUF",
      "name": "PROTOBUF",
      "color": "ededed",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-04-27T21:37:04Z",
  "updated_at": "2023-05-05T00:28:42Z",
  "closed_at": "2023-05-04T23:57:20Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "draft": false,
  "pull_request": {
    "url": "https://api.github.com/repos/apache/spark/pulls/40983",
    "html_url": "https://github.com/apache/spark/pull/40983",
    "diff_url": "https://github.com/apache/spark/pull/40983.diff",
    "patch_url": "https://github.com/apache/spark/pull/40983.patch",
    "merged_at": null
  },
  "body": "### What changes were proposed in this pull request?\r\n\r\nThis adds an option to convert Protobuf 'Any' fields to JSON. At runtime such 'Any' fields   \r\ncan contain arbitrary Protobuf message serialized as binary data.                            \r\n                                                                                             \r\nBy default when this option is not enabled, such field behaves like normal Protobuf message  \r\nwith two fields (`STRUCT<type_url: STRING, value: BINARY>`). The binary `value` field is not \r\ninterpreted. This might not be convenient in practice.                                       \r\n                                                                                             \r\nOne option is to deserialize it into actual Protobuf message and convert it to Spark STRUCT. \r\nBut this is not feasible since the schema for `from_protobuf()` is needed at query compile   \r\ntime and can not change at run time. As a result this is not feasible.                       \r\n                                                                                             \r\nAnother option is parse the binary and deserialize the Protobuf message into JSON string.    \r\nThis this lot more readable than the binary data. This configuration option enables          \r\nconverting Any fields to JSON. The example blow clarifies further.                            \r\n                                                                                             \r\n Consider two Protobuf types defined as follows:                                             \r\n```\r\n   message ProtoWithAny {                                                                    \r\n      string event_name = 1;                                                                 \r\n      google.protobuf.Any details = 2;                                                       \r\n   }                                                                                         \r\n                                                                                             \r\n   message Person {                                                                          \r\n     string name = 1;                                                                        \r\n     int32 id = 2;                                                                           \r\n  }                                                                                          \r\n```                                                                                             \r\nWith this option enabled, schema for `from_protobuf(\"col\", messageName = \"ProtoWithAny\")`    \r\nwould be : `STRUCT<event_name: STRING, details: STRING>`.                                    \r\nAt run time, if `details` field contains `Person` Protobuf message, the returned value looks \r\nlike the this:\r\n                                                    \r\n    ('click', '{\"@type\":\"type.googleapis.com/...ProtoWithAny\",\"name\":\"Mario\",\"id\":100}')       \r\n                                                                                             \r\nRequirements:                                                                                \r\n - The definitions for all the possible Protobuf types that are used in Any fields should be \r\n   available in the Protobuf descriptor file passed to `from_protobuf()`. If any Protobuf    \r\n   is not found, it will result in error for that record.                                    \r\n - This feature is supported with Java classes as well. But only the Protobuf types defined  \r\n   in the same `proto` file as the primary Java class might be visible.                      \r\n   E.g. if `ProtoWithAny` and `Person` in above example are in different proto files,        \r\n   definition for `Person` may not be found.                                                 \r\n\r\n### Why are the changes needed?\r\n\r\nImproves handling of Any fields.\r\n\r\n\r\n### Does this PR introduce _any_ user-facing change?\r\nNo. Default behavior is not changed\r\n\r\n\r\n### How was this patch tested?\r\n- Unit tests\r\n",
  "closed_by": {
    "login": "gengliangwang",
    "id": 1097932,
    "node_id": "MDQ6VXNlcjEwOTc5MzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1097932?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gengliangwang",
    "html_url": "https://github.com/gengliangwang",
    "followers_url": "https://api.github.com/users/gengliangwang/followers",
    "following_url": "https://api.github.com/users/gengliangwang/following{/other_user}",
    "gists_url": "https://api.github.com/users/gengliangwang/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gengliangwang/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gengliangwang/subscriptions",
    "organizations_url": "https://api.github.com/users/gengliangwang/orgs",
    "repos_url": "https://api.github.com/users/gengliangwang/repos",
    "events_url": "https://api.github.com/users/gengliangwang/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gengliangwang/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/apache/spark/issues/40983/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/apache/spark/issues/40983/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
