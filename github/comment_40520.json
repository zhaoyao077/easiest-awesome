[
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1480428307",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1480428307",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1480428307,
    "node_id": "IC_kwDOAQXtWs5YPYsT",
    "user": {
      "login": "WeichenXu123",
      "id": 19235986,
      "node_id": "MDQ6VXNlcjE5MjM1OTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19235986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WeichenXu123",
      "html_url": "https://github.com/WeichenXu123",
      "followers_url": "https://api.github.com/users/WeichenXu123/followers",
      "following_url": "https://api.github.com/users/WeichenXu123/following{/other_user}",
      "gists_url": "https://api.github.com/users/WeichenXu123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WeichenXu123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WeichenXu123/subscriptions",
      "organizations_url": "https://api.github.com/users/WeichenXu123/orgs",
      "repos_url": "https://api.github.com/users/WeichenXu123/repos",
      "events_url": "https://api.github.com/users/WeichenXu123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WeichenXu123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-23T00:40:14Z",
    "updated_at": "2023-03-23T00:56:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "To address @HyukjinKwon 's concern about optimizer, \r\n\r\ncan we add `is_barrier` attribute into `UnaryNode`,\r\nand if optimizer find a node marking `is_barrier` as True, then skip all optimizations around the node.\r\n\r\nCC @cloud-fan @mengxr WDYT ?\r\n\r\n\r\nBarrier mode is only used in specific ML case, i.e. in model training routine, we will only use it in one pattern:\r\n\r\n`dataset.mapInPandas(..., is_barrier=True).collect()`\r\n\r\nand we don't need complex optimization for it.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1480428307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1480433026",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1480433026",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1480433026,
    "node_id": "IC_kwDOAQXtWs5YPZ2C",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-23T00:49:16Z",
    "updated_at": "2023-03-23T00:49:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmmm why do we need to care about the optimizer? The optimizer is not sensitive to the physical execution engine, e.g. Presto, Spark, Flink have many similar SQL optimizations.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1480433026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1480433501",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1480433501",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1480433501,
    "node_id": "IC_kwDOAQXtWs5YPZ9d",
    "user": {
      "login": "WeichenXu123",
      "id": 19235986,
      "node_id": "MDQ6VXNlcjE5MjM1OTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19235986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WeichenXu123",
      "html_url": "https://github.com/WeichenXu123",
      "followers_url": "https://api.github.com/users/WeichenXu123/followers",
      "following_url": "https://api.github.com/users/WeichenXu123/following{/other_user}",
      "gists_url": "https://api.github.com/users/WeichenXu123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WeichenXu123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WeichenXu123/subscriptions",
      "organizations_url": "https://api.github.com/users/WeichenXu123/orgs",
      "repos_url": "https://api.github.com/users/WeichenXu123/repos",
      "events_url": "https://api.github.com/users/WeichenXu123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WeichenXu123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-23T00:50:12Z",
    "updated_at": "2023-03-23T00:54:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> hmmm why do we need to care about the optimizer? The optimizer is not sensitive to the physical execution engine, e.g. Preso, Spark, Flink have many similar SQL optimizations.\r\n\r\nI am not familier with optimizer details but it is concern from @HyukjinKwon \r\nBut note this PR also changes logical plan operator like `MapInPandas`",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1480433501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1480443966",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1480443966",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1480443966,
    "node_id": "IC_kwDOAQXtWs5YPcg-",
    "user": {
      "login": "HyukjinKwon",
      "id": 6477701,
      "node_id": "MDQ6VXNlcjY0Nzc3MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6477701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HyukjinKwon",
      "html_url": "https://github.com/HyukjinKwon",
      "followers_url": "https://api.github.com/users/HyukjinKwon/followers",
      "following_url": "https://api.github.com/users/HyukjinKwon/following{/other_user}",
      "gists_url": "https://api.github.com/users/HyukjinKwon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HyukjinKwon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HyukjinKwon/subscriptions",
      "organizations_url": "https://api.github.com/users/HyukjinKwon/orgs",
      "repos_url": "https://api.github.com/users/HyukjinKwon/repos",
      "events_url": "https://api.github.com/users/HyukjinKwon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HyukjinKwon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-23T01:07:03Z",
    "updated_at": "2023-03-23T01:07:03Z",
    "author_association": "MEMBER",
    "body": "Predicate pushdown is just an example. e.g., you might want to combine adjacent `MapInPandas`s but it would need a special handling if `is_barrier` flag is added. ",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1480443966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1480444902",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1480444902",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1480444902,
    "node_id": "IC_kwDOAQXtWs5YPcvm",
    "user": {
      "login": "HyukjinKwon",
      "id": 6477701,
      "node_id": "MDQ6VXNlcjY0Nzc3MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6477701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HyukjinKwon",
      "html_url": "https://github.com/HyukjinKwon",
      "followers_url": "https://api.github.com/users/HyukjinKwon/followers",
      "following_url": "https://api.github.com/users/HyukjinKwon/following{/other_user}",
      "gists_url": "https://api.github.com/users/HyukjinKwon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HyukjinKwon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HyukjinKwon/subscriptions",
      "organizations_url": "https://api.github.com/users/HyukjinKwon/orgs",
      "repos_url": "https://api.github.com/users/HyukjinKwon/repos",
      "events_url": "https://api.github.com/users/HyukjinKwon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HyukjinKwon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-23T01:08:25Z",
    "updated_at": "2023-03-23T01:10:21Z",
    "author_association": "MEMBER",
    "body": "I am saying that real power of Catalyst optimizer is to optimize/reorder these logical plans, and I believe that's the reason why barrier execution wasn't introduced in SQL. The barrier has to be created exactly when the call is invoked, in which basically it requires something like https://github.com/apache/spark/pull/19873 to have a sound implementation.\r\n\r\nHowever, I am fine with having this as an exception if you guys are fine with this.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1480444902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1480490580",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1480490580",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1480490580,
    "node_id": "IC_kwDOAQXtWs5YPn5U",
    "user": {
      "login": "zhengruifeng",
      "id": 7322292,
      "node_id": "MDQ6VXNlcjczMjIyOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7322292?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zhengruifeng",
      "html_url": "https://github.com/zhengruifeng",
      "followers_url": "https://api.github.com/users/zhengruifeng/followers",
      "following_url": "https://api.github.com/users/zhengruifeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/zhengruifeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zhengruifeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zhengruifeng/subscriptions",
      "organizations_url": "https://api.github.com/users/zhengruifeng/orgs",
      "repos_url": "https://api.github.com/users/zhengruifeng/repos",
      "events_url": "https://api.github.com/users/zhengruifeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zhengruifeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-23T02:22:40Z",
    "updated_at": "2023-03-23T02:22:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Barrier mode is only used in specific ML case, i.e. in model training routine, we will only use it in one pattern:\r\n> \r\n> dataset.mapInPandas(..., is_barrier=True).collect()\r\n\r\n> To simply the implementation, we can implement a barrierMapInPandasAndCollect instead, and define a execution plan stage like BarrierMapInPandasAndCollectExec\r\n\r\nIf it is the only usage case, i think it will be safe to add dedicated logical plan and physical plan for it.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1480490580/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1480510947",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1480510947",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1480510947,
    "node_id": "IC_kwDOAQXtWs5YPs3j",
    "user": {
      "login": "WeichenXu123",
      "id": 19235986,
      "node_id": "MDQ6VXNlcjE5MjM1OTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19235986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WeichenXu123",
      "html_url": "https://github.com/WeichenXu123",
      "followers_url": "https://api.github.com/users/WeichenXu123/followers",
      "following_url": "https://api.github.com/users/WeichenXu123/following{/other_user}",
      "gists_url": "https://api.github.com/users/WeichenXu123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WeichenXu123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WeichenXu123/subscriptions",
      "organizations_url": "https://api.github.com/users/WeichenXu123/orgs",
      "repos_url": "https://api.github.com/users/WeichenXu123/repos",
      "events_url": "https://api.github.com/users/WeichenXu123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WeichenXu123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-23T02:39:24Z",
    "updated_at": "2023-03-23T02:39:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I am saying that real power of Catalyst optimizer is to optimize/reorder these logical plans, and I believe that's the reason why barrier execution wasn't introduced in SQL. The barrier has to be created exactly when the call is invoked, in which basically it requires something like #19873 to have a sound implementation.\r\n> \r\n> However, I am fine with having this as an exception if you guys are fine with this.\r\n\r\n@cloud-fan What do you think of this ?",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1480510947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1480533198",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1480533198",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1480533198,
    "node_id": "IC_kwDOAQXtWs5YPyTO",
    "user": {
      "login": "cloud-fan",
      "id": 3182036,
      "node_id": "MDQ6VXNlcjMxODIwMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloud-fan",
      "html_url": "https://github.com/cloud-fan",
      "followers_url": "https://api.github.com/users/cloud-fan/followers",
      "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
      "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
      "repos_url": "https://api.github.com/users/cloud-fan/repos",
      "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-23T02:56:45Z",
    "updated_at": "2023-03-23T02:56:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "From a SQL engine's point of view, running all tasks at once or batch by batch doesn't matter. It doesn't change the semantics of the SQL operator, and the optimizer doesn't care about it. However, `mapInPandas` is a public API and you are free to define what's the expectation of the `is_barrier` parameter. To make our life easier, we can just define it as \"the tasks of running the pandas function must all be launched at once\", and it's not a barrier to the SQL operators. Then I think it's fine to just add a flag to the existing `MapInPandas` operator.",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1480533198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/apache/spark/issues/comments/1484344658",
    "html_url": "https://github.com/apache/spark/pull/40520#issuecomment-1484344658",
    "issue_url": "https://api.github.com/repos/apache/spark/issues/40520",
    "id": 1484344658,
    "node_id": "IC_kwDOAQXtWs5YeU1S",
    "user": {
      "login": "WeichenXu123",
      "id": 19235986,
      "node_id": "MDQ6VXNlcjE5MjM1OTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19235986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WeichenXu123",
      "html_url": "https://github.com/WeichenXu123",
      "followers_url": "https://api.github.com/users/WeichenXu123/followers",
      "following_url": "https://api.github.com/users/WeichenXu123/following{/other_user}",
      "gists_url": "https://api.github.com/users/WeichenXu123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WeichenXu123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WeichenXu123/subscriptions",
      "organizations_url": "https://api.github.com/users/WeichenXu123/orgs",
      "repos_url": "https://api.github.com/users/WeichenXu123/repos",
      "events_url": "https://api.github.com/users/WeichenXu123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WeichenXu123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-27T01:42:32Z",
    "updated_at": "2023-03-27T01:42:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "merged to master :)",
    "reactions": {
      "url": "https://api.github.com/repos/apache/spark/issues/comments/1484344658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
