{
  "url": "https://api.github.com/repos/apache/spark/issues/40865",
  "repository_url": "https://api.github.com/repos/apache/spark",
  "labels_url": "https://api.github.com/repos/apache/spark/issues/40865/labels{/name}",
  "comments_url": "https://api.github.com/repos/apache/spark/issues/40865/comments",
  "events_url": "https://api.github.com/repos/apache/spark/issues/40865/events",
  "html_url": "https://github.com/apache/spark/pull/40865",
  "id": 1675996721,
  "node_id": "PR_kwDOAQXtWs5OutOK",
  "number": 40865,
  "title": "[SPARK-43156][SQL] Fix `COUNT(*) is null` bug in correlated scalar subquery",
  "user": {
    "login": "Hisoka-X",
    "id": 32387433,
    "node_id": "MDQ6VXNlcjMyMzg3NDMz",
    "avatar_url": "https://avatars.githubusercontent.com/u/32387433?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Hisoka-X",
    "html_url": "https://github.com/Hisoka-X",
    "followers_url": "https://api.github.com/users/Hisoka-X/followers",
    "following_url": "https://api.github.com/users/Hisoka-X/following{/other_user}",
    "gists_url": "https://api.github.com/users/Hisoka-X/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Hisoka-X/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Hisoka-X/subscriptions",
    "organizations_url": "https://api.github.com/users/Hisoka-X/orgs",
    "repos_url": "https://api.github.com/users/Hisoka-X/repos",
    "events_url": "https://api.github.com/users/Hisoka-X/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Hisoka-X/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1405794576,
      "node_id": "MDU6TGFiZWwxNDA1Nzk0NTc2",
      "url": "https://api.github.com/repos/apache/spark/labels/SQL",
      "name": "SQL",
      "color": "ededed",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2023-04-20T04:54:10Z",
  "updated_at": "2023-05-02T15:44:31Z",
  "closed_at": "2023-04-27T08:35:45Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "draft": false,
  "pull_request": {
    "url": "https://api.github.com/repos/apache/spark/pulls/40865",
    "html_url": "https://github.com/apache/spark/pull/40865",
    "diff_url": "https://github.com/apache/spark/pull/40865.diff",
    "patch_url": "https://github.com/apache/spark/pull/40865.patch",
    "merged_at": null
  },
  "body": "<!--\r\nThanks for sending a pull request!  Here are some tips for you:\r\n  1. If this is your first time, please read our contributor guidelines: https://spark.apache.org/contributing.html\r\n  2. Ensure you have added or run the appropriate tests for your PR: https://spark.apache.org/developer-tools.html\r\n  3. If the PR is unfinished, add '[WIP]' in your PR title, e.g., '[WIP][SPARK-XXXX] Your PR title ...'.\r\n  4. Be sure to keep the PR description updated to reflect all changes.\r\n  5. Please write your PR title to summarize what this PR proposes.\r\n  6. If possible, provide a concise example to reproduce the issue for a faster review.\r\n  7. If you want to add a new configuration, please read the guideline first for naming configurations in\r\n     'core/src/main/scala/org/apache/spark/internal/config/ConfigEntry.scala'.\r\n  8. If you want to add or modify an error type or message, please read the guideline first in\r\n     'core/src/main/resources/error/README.md'.\r\n-->\r\n\r\n### What changes were proposed in this pull request?\r\nExample query:\r\n```sql\r\n\r\ncreate or replace temp view t0 (a, b)\r\nas values\r\n    (1, 1.0),\r\n    (2, 2.0);\r\ncreate or replace temp view t1 (c, d)\r\nas values\r\n    (2, 3.0); \r\n\r\nspark.sql(\"select *, (select (count(1)) is null from t1 where t0.a = t1.c) from t0\").collect()\r\nres6: Array[org.apache.spark.sql.Row] = Array([1,1.0,null], [2,2.0,false])  \r\n```\r\nIn this subquery, count(1) always evaluates to a non-null integer value, so count(1) is null is always false. The correct evaluation of the subquery is always false.\r\n\r\nWe incorrectly evaluate it to null for empty groups. The reason is that NullPropagation rewrites `Aggregate [c] [isnull(count(1))]` to `Aggregate [c] [false]`, this rewrite would be correct normally, but in the context of a scalar subquery it breaks our count bug handling in RewriteCorrelatedScalarSubquery.constructLeftJoins . By the time we get there, the query appears to not have the count bug - it looks the same as if the original query had a subquery with `select any_value(false) from r...`, and that case is not subject to the count bug.\r\n\r\nPostgres comparison show correct always-false result: http://sqlfiddle.com/#!17/67822/5\r\n\r\nSolution:\r\n\r\nThe reason are `NullPropagation` triggers the bug for `(count(1)) is null`, but the root cause is the wrong handling of literals when dealing with the count bug. The bug can be triggered when the scalar subquery has a global aggregate with a constant, which can be produced by NullPropagation or by the user query directly. We should make sure `resultWithZeroTups` return real value when use scalar subquery and return value are `Literal`. \r\n\r\n<!--\r\nPlease clarify what changes you are proposing. The purpose of this section is to outline the changes and how this PR fixes the issue. \r\nIf possible, please consider writing useful notes for better and faster reviews in your PR. See the examples below.\r\n  1. If you refactor some codes with changing classes, showing the class hierarchy will help reviewers.\r\n  2. If you fix some SQL features, you can provide some references of other DBMSes.\r\n  3. If there is design documentation, please add the link.\r\n  4. If there is a discussion in the mailing list, please add the link.\r\n-->\r\n\r\n\r\n### Why are the changes needed?\r\n\r\nFix `COUNT(*) is null bug` in correlated scalar subquery\r\n\r\n<!--\r\nPlease clarify why the changes are needed. For instance,\r\n  1. If you propose a new API, clarify the use case for a new API.\r\n  2. If you fix a bug, you can clarify why it is a bug.\r\n-->\r\n\r\n\r\n### Does this PR introduce _any_ user-facing change?\r\n\r\nYes, some sql query result will be changed.\r\n\r\n<!--\r\nNote that it means *any* user-facing change including all aspects such as the documentation fix.\r\nIf yes, please clarify the previous behavior and the change this PR proposes - provide the console output, description and/or an example to show the behavior difference if possible.\r\nIf possible, please also clarify if this is a user-facing change compared to the released Spark versions or within the unreleased branches such as master.\r\nIf no, write 'No'.\r\n-->\r\n\r\n\r\n### How was this patch tested?\r\n\r\nAdd new tests \r\n\r\n<!--\r\nIf tests were added, say they were added here. Please make sure to add some test cases that check the changes thoroughly including negative and positive cases if possible.\r\nIf it was tested in a way different from regular unit tests, please clarify how you tested step by step, ideally copy and paste-able, so that other reviewers can test and check, and descendants can verify in the future.\r\nIf tests were not added, please describe why they were not added and/or why it was difficult to add.\r\nIf benchmark tests were added, please run the benchmarks in GitHub Actions for the consistent environment, and the instructions could accord to: https://spark.apache.org/developer-tools.html#github-workflow-benchmarks.\r\n-->\r\n",
  "closed_by": {
    "login": "cloud-fan",
    "id": 3182036,
    "node_id": "MDQ6VXNlcjMxODIwMzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3182036?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cloud-fan",
    "html_url": "https://github.com/cloud-fan",
    "followers_url": "https://api.github.com/users/cloud-fan/followers",
    "following_url": "https://api.github.com/users/cloud-fan/following{/other_user}",
    "gists_url": "https://api.github.com/users/cloud-fan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cloud-fan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cloud-fan/subscriptions",
    "organizations_url": "https://api.github.com/users/cloud-fan/orgs",
    "repos_url": "https://api.github.com/users/cloud-fan/repos",
    "events_url": "https://api.github.com/users/cloud-fan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cloud-fan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/apache/spark/issues/40865/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/apache/spark/issues/40865/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
